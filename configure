#!/usr/bin/env ocaml

#load "unix.cma"

let prefix = ref "/usr/local"

let features =
  [
    "sundials", ref false;
    "gtk", ref false;
    "glmlite", ref false;
  ]

let feature_enabled name =
  ! (List.assoc name features)

let get_stdlib_prefix () =
  Filename.(concat (concat !prefix "share") "%%NAME%%")

let get_current_date () =
  let open Unix in
  let t = gmtime @@ time () in
  Printf.sprintf
    "%.2d-%.2d-%d-%d:%d"
    t.tm_mday t.tm_mon (1900 + t.tm_year)
    t.tm_hour t.tm_min

let () =
  let options =
    [
      "--prefix", Arg.Set_string prefix, " Installation prefix";
    ]
    @ List.map
        (fun (s, r) -> "--enable-" ^ s, Arg.Set r, " Enable " ^ s)
        features
    @ List.map
        (fun (s, r) -> "--disable-" ^ s, Arg.Clear r, " Disable " ^ s)
        features
  in
  Arg.parse
    options
    (fun cmd ->
      Printf.eprintf "Don't know what to do with \"%s\".\n" cmd;
      exit 1)
    "Usage: ./configure [OPTIONS]";
  (* Generate configuration module. *)
  let default_solver =
    if feature_enabled "sundials" then "Sundials_cvode" else "Odexx.Ode45"
  in
  let statements =
    let dquote s = "\"" ^ s ^ "\"" in
    [
      "version", "\"2.1\"";
      "subversion", "\"-dev\"";
      "stdlib", dquote @@ get_stdlib_prefix ();
      "date", dquote @@ get_current_date ();
      "default_solver", dquote default_solver;
    ]
    @ List.map (fun (n, r) -> n, string_of_bool !r) features
  in
  let oc = open_out_bin "config.ml" in
  List.iter
    (fun (x, s) -> Printf.fprintf oc {|let %s = %s
|} x s)
    statements;
  close_out oc;
  (* Generate lib/Defaultsolver.ml *)
  let oc = open_out_bin (Filename.concat "lib/std" "defaultsolver.ml") in
  Printf.fprintf oc {|include %s|} default_solver;
  close_out oc