
without gtk
# let () = Zlsrun.go prog_alloc prog_size prog_cont prog_step
./compiler/zeluc.byte -I lib/ prog.zls
ocamlc -o prog -I ./lib -I sundialsml \
	unix.cma bigarray.cma sundials_cvode.cma \
	lib/zllib.cma prog.ml

with gtk
--------
# let () = Zlsrungtk.go prog_alloc prog_size prog_cont prog_step
./compiler/zeluc.byte -I lib/ prog.zls
ocamlc -o prog -I ./lib -I sundialsml -I +lablgtk2 \
	unix.cma bigarray.cma sundials_cvode.cma lablgtk.cma \
	lib/zllibgtk.cma prog.ml

ProblÃ¨mes actuels
-----------------
* cd examples/bouncingball; make
  Fatal error: exception Assert_failure("gencode/translate.ml", 357, 43)


Pour Marc:
simulator.ml:
1/ verifier les types;
2/ pour le code discret, sans gtk ou avec, garder l'existant.
3/ pour le continu mettre le code ci-dessus.


Interface:

val prog_alloc : unit -> t
val prog_size : t -> int * int
val prog_cont : t -> cvec * cvec * zin_vec * zout_vec -> time -> unit
val prog_step : t -> cvec * cvec * zin_vec * zout_vec -> time -> time * bool
