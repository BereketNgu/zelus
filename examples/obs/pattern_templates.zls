open Obs
open Scope

let static tstep = 0.05

(*
    -----------------------------
    Pattern templates
    -----------------------------
*)

(* it is never the case that p holds *)
node absence p = never p

(* after the first T seconds, it is never the case that p holds *)
node absence_timed t (tstep, p) = neverBfromA (horizon t tstep, p)

(* it is always the case that once p becomes satisfied, it holds for at
   least T seconds *)
node minimum_duration t (tstep, p) =
    let cpt = counter t (tstep, b_up (q_istrue p)) in
    implies (q_not p, q_lt(cpt, 0.))

(* it is always the case that once p becomes satisfied, it holds for at
   most T seconds *)
node maximum_duration t (tstep, p) =
    let cpt = counter t (tstep, b_up (q_istrue p)) in
    implies (p, q_ge(cpt, 0.))

(* it is always the case that p holds at least every T seconds *)
node bounded_recurrence t (tstep, p) =
    let cpt = counter t (tstep, true -> b_up (q_istrue p)) in
    q_ge (cpt, 0.)

(* it is always the case that if p holds, then s holds after at
   most T seconds *)
node bounded_response t (tstep, p, s) =
    reset q_or (never p, onceBfromfirstA_timed t (tstep, p, s))
    every (q_istrue s)

(* it is always the case that if p holds then s holds for at least T seconds *)
node bounded_invariance t (tstep, p, s) =
    let cpt = counter t (tstep, b_up (q_istrue p && q_istrue s)) in
    q_or (s, (q_le (cpt, 0.)))

(*
    -----------------------------
    Test pattern templates
    -----------------------------
*)

node sawtooth () =
    let rec t = 0. fby (t +. tstep) in
    mod_float t 0.5

let clamp (minv, maxv, v) = min (max v minv) maxv

node scope_of_formula (b1, b2) (formula_str, rob) =
    scope2(b1, b2, (formula_str, points false, clamp (2. *. b1, 2. *. b2, rob)),
                   ("", linear, 0.))

node test_absence () =
    let rec t = 0. fby (t +. tstep) in

    let p1 = sawtooth () +. q_lt(t, 2.) in
    let p2 = sawtooth () +. q_gt(t, 1.) in

    let phi_ok = absence p1 in
    let phi_notok = absence p2 in

    let s1 = scope3(-20., 20., ("p1", linear, p1),
                             ("p2", linear, p2),
                             ("", linear, 0.)) in
    let s2 = scope_of_formula (-10., 10.)
        ("it is never the case that p1 holds", phi_ok) in
    let s3 = scope_of_formula (-10., 10.)
        ("it is never the case that p2 holds", phi_notok) in

    window3("Absence", 10., t, s1, s2, s3)

node test_absence_timed () =
    let rec t = 0. fby (t +. tstep) in

    let p = q_lt(t, 3.) in

    let phi_ok = absence_timed 4. (tstep, p) in
    let phi_notok = absence_timed 2. (tstep, p) in

    let s1 = scope2(-7., 3., ("p", linear, p),
                             ("", linear, 0.)) in
    let s2 = scope_of_formula (-10., 10.)
        ("after 4 second, it is never the case that p holds ",
        phi_ok) in
    let s3 = scope_of_formula (-10., 10.)
        ("after 2 seconds, it is never the case that p holds ",
        phi_notok) in

    window3("Absence (timed)", 10., t, s1, s2, s3)

node test_minimum_duration () =
    let rec t = 0. fby (t +. tstep) in

    let p = q_or (q_lt(t, 0.5),
                  q_and(q_gt(t, 3.5), q_lt(t, 4.))) in

    let phi_ok = minimum_duration 0.2 (tstep, p) in
    let phi_notok = minimum_duration 1. (tstep, p) in

    let s1 = scope2(-5., 1., ("p", points false, p),
                             ("", linear, 0.)) in
    let s2 = scope_of_formula (-10., 10.)
        ("it is always the case that once p becomes satisfied, it holds for at least 0.2 seconds",
        phi_ok) in
    let s3 = scope_of_formula (-10., 10.)
        ("it is always the case that once p becomes satisfied, it holds for at least 1 second",
        phi_notok) in

    window3("Minimum duration", 10., t, s1, s2, s3)

node test_maximum_duration () =
    let rec t = 0. fby (t +. tstep) in

    let p = q_and(q_gt(t, 3.5), q_lt(t, 8.)) in

    let phi_ok = maximum_duration 5. (tstep, p) in
    let phi_notok = maximum_duration 1. (tstep, p) in

    let s1 = scope2(-5., 1., ("p", linear, p),
                             ("", linear, 0.)) in
    let s2 = scope_of_formula (-10., 10.)
        ("it is always the case that once p becomes satisfied, it holds for at most 5 second",
        phi_ok) in
    let s3 = scope_of_formula (-10., 10.)
        ("it is always the case that once p becomes satisfied, it holds for at most 1 seconds",
        phi_notok) in

    window3("Maximum duration", 10., t, s1, s2, s3)

node test_bounded_recurrence () =
    let rec t = 0. fby (t +. tstep) in

    let p = if t < 5. then (mod_float t 0.15 -. 0.075)
            else (mod_float t 0.5 -. 0.25) in

    let phi_ok = bounded_recurrence 1. (tstep, p) in
    let phi_notok = bounded_recurrence 0.2 (tstep, p) in

    let s1 = scope2(-5., 1., ("p", linear, p),
                             ("", linear, 0.)) in
    let s2 = scope_of_formula (-10., 10.)
        ("it is always the case that p holds at least every 1 second",
        phi_ok) in
    let s3 = scope_of_formula (-10., 10.)
        ("it is always the case that p holds at least every 0.2 seconds",
        phi_notok) in

    window3("Bounded recurrence", 10., t, s1, s2, s3)

node test_bounded_response () =
    let rec t = 0. fby (t +. tstep) in

    let p = q_and(q_gt(t, 3.5), q_lt(t, 5.)) in
    let s = q_and(q_gt(t, 4.5), q_lt(t, 5.)) in

    let phi_ok = bounded_response 5. (tstep, p, s) in
    let phi_notok = bounded_response 0.2 (tstep, p, s) in

    let s1 = scope3(-5., 1., ("p", linear, p),
                             ("s", linear, s),
                             ("", linear, 0.)) in
    let s2 = scope_of_formula (-10., 10.)
        ("it is always the case that if p holds, then s holds after at most 5 second",
        phi_ok) in
    let s3 = scope_of_formula (-10., 10.)
        ("it is always the case that if p holds, then s holds after at most 0.2 seconds",
        phi_notok) in

    present (phi_notok < 0.) -> print_endline ((string_of_float t) ^ ", " ^ (string_of_float phi_notok));

    window3("Bounded response", 10., t, s1, s2, s3)

node test_bounded_invariance () =
    let rec t = 0. fby (t +. tstep) in

    let p = q_and(q_gt(t, 3.5), q_lt(t, 3.8)) in
    let s = q_and(q_gt(t, 3.5), q_lt(t, 4.)) in

    let phi_ok = bounded_invariance 0.2 (tstep, p, s) in
    let phi_notok = bounded_invariance 1. (tstep, p, s) in

    let s1 = scope3(-5., 1., ("p", linear, p),
                             ("s", linear, s),
                             ("", linear, 0.)) in
    let s2 = scope_of_formula (-10., 10.)
        ("it is always the case that if p holds then s holds for at least 0.2 seconds",
        phi_ok) in
    let s3 = scope_of_formula (-10., 10.)
        ("it is always the case that if p holds then s holds for at least 1 second",
        phi_notok) in

    window3("Bounded invariance", 10., t, s1, s2, s3)
