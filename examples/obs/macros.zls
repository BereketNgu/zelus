open Scope
open Obs

let static tstep = 0.1

node main () =
    let rec t = 0. fby (t +. tstep) in

    let v_true  = sin(t) +. 2. in
    let v_false = sin(t) -. 2. in

    let x =
             if (t > 9.) then v_true
        else if (t > 8.5) then v_false
        else if (t > 7.5) then v_true
        else if (t > 7.0) then v_false
        else if (t > 6.5) then v_true
        else if (t > 4.6) then v_false
        else if (t > 3.8) then v_true
        else if (t > 2.8) then v_false
        else if (t > 1.8) then v_true
        else if (t > 1.6) then v_false
        else if (t > 0.6) then v_true
        else if (t > 0.5) then v_false
        else v_true
    in

    let phi_ok, is_done1 = d_always_next (9., 2.) (tstep, x) in
    let phi_notok, is_done2 = d_always_next (9., 1.) (tstep, x) in
    let st1 = float_of_state is_done1 in
    let st2 = float_of_state is_done2 in

    let s1 = scope2(-3., 3., ("x", linear, x), ("", linear, 0.)) in
    let s2 = scope2(-3., 3., ("always_next (9, 2) x", linear, phi_ok),
                             ("[state: 0 = NotYet 1 = Done]", linear, st1)) in
    let s3 = scope2(-3., 3., ("always_next (9, 1) x", linear, phi_notok),
                             ("[state: 0 = NotYet 1 = Done]", linear, st2)) in
    window3("Macros", 10., t, s1, s2, s3)
