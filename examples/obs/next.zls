open Scope
open Obs

let static tstep = 0.1

node main () =
    let rec t = 0. fby (t +. tstep) in

    let v_true  = cos(t) +. 2. in
    let v_false = sin(t) -. 2. in

    let x =
             if (t > 5.) then v_false
        else if (t > 4.) then v_true
        else v_false
    in

    let r1, s1 = d_next 5. (tstep, x) in
    let r2, s2 = d_next 3. (tstep, x) in
    let st1 = float_of_state s1 in
    let st2 = float_of_state s2 in


    let s1 = scope(-3., 3., ("x", linear, x)) in
    let s2 = scope2(-3., 3.,
        ("next(5) x", linear, r1),
        ("[state: 0 = NotYet 1 = Done]", linear, st1)) in
    let s3 = scope2(-3., 3.,
        ("next(3) x", linear, r2),
        ("[state: 0 = NotYet 1 = Done]", linear, st2)) in
    window3("Next", 10., t, s1, s2, s3)

hybrid main_c () =
    let der t = 1. init 0. in

    let v_true  = cos(t) +. 2. in
    let v_true_der = -. sin(t) in
    let v_false = sin(t) -. 2. in
    let v_false_der = cos(t) in

    let x_bool = present
        | up(t -. 5.) -> false
        | up(t -. 4.) -> true
        init false
    in
    let x = if x_bool then v_true else v_false in
    let x_der = if x_bool then v_true_der else v_false_der in

    let r1, st1 = c_next 5. (x, x_der) in
    let r2, st2 = c_next 3. (x, x_der) in

    present (period(tstep)) ->
        let s1 = scope(-3., 3., ("x", linear, x)) in
        let s2 = scope2(-3., 3.,
            ("next(5) x", linear, r1),
            ("[state: 0 = NotYet 1 = Done]", linear, float_of_state st1)) in
        let s3 = scope2(-3., 3.,
            ("next(3) x", linear, r2),
            ("[state: 0 = NotYet 1 = Done]", linear, float_of_state st2)) in
        window3("Continuous Next", 10., t, s1, s2, s3)
    else ()
