open Obs
open Scope

let static tstep = 0.05

node sawtooth () =
    let rec t = 0. fby (t +. tstep) in
    mod_float t 0.5

node test_counter () =
    let rec t = 0. fby (t +. tstep) in

    let start =
        present
        | (b_up (t > 1.)) | (b_up (t > 2.)) | (b_up (t > 7.))
        | (b_up (t > 13.)) -> true
        else false
    in
    let cpt = counter 5. (tstep, start) in

    let s = scope2(-10., 5., ("cpt", linear, cpt),
                             ("start", points false, if start then 2.5 else 0.)) in
    window("Counter", 20., t, s)

node test_since () =
    let rec t = 0. fby (t +. tstep) in

    let x = q_or (q_or (q_lt (t, 2.), q_and(q_gt(t, 3.5), q_lt(t, 3.8))),
                  q_and (q_gt (t, 5.), q_lt (t, 5.5))) in
    let y = q_or (q_and(q_gt(t, 3.5), q_lt(t, 4.)),
                  q_and(q_gt(t, 6.), q_lt(t, 6.5))) in

    let since = since (x, y) in

    let s1 = scope3(-5., 1., ("x", linear, x), ("y", linear, y),
                             ("", linear, 0.)) in
    let s2 = scope2(-5., 1., ("x since y", linear, since),
                             ("", linear, 0.)) in

    window2("Since", 10., t, s1, s2)

node test_always () =
    let rec t = 0. fby (t +. tstep) in

    let p1 = sawtooth () +. q_lt(t, 6.) in
    let p2 = -. sawtooth () -. q_gt(t, 1.) in

    let always1 = always p1 in
    let always2 = always p2 in

    let s1 = scope3(-10., 10., ("p1", linear, p1), ("p2", linear, p2),
                               ("", linear, 0.)) in
    let s2 = scope3(-10., 10., ("always p1", linear, always1),
                               ("always p2", linear, always2),
                               ("", linear, 0.)) in

    window2("Always", 10., t, s1, s2)

node test_always_timed () =
    let rec t = 0. fby (t +. tstep) in

    let p1 = sawtooth () +. q_lt(t, 6.) in
    let p2 = -. sawtooth () -. q_gt(t, 1.) in

    let always1 = always_timed 5. (tstep, p1) in
    let always2 = always_timed 5. (tstep, p2) in

    let s1 = scope3(-10., 10., ("p1", linear, p1), ("p2", linear, p2),
                               ("", linear, 0.)) in
    let s2 = scope3(-10., 10., ("always_timed 5. p1", linear, always1),
                               ("always_timed 5. p2", linear, always2),
                               ("", linear, 0.)) in

    window2("Always Timed", 10., t, s1, s2)

node test_once () =
    let rec t = 0. fby (t +. tstep) in

    let p1 = -. sawtooth () -. q_lt(t, 6.) in
    let p2 = sawtooth () +. q_gt(t, 1.) in

    let once1 = once p1 in
    let once2 = once p2 in

    let s1 = scope3(-10., 10., ("p1", linear, p1), ("p2", linear, p2),
                               ("", linear, 0.)) in
    let s2 = scope3(-10., 10., ("once p1", linear, once1),
                               ("once p2", linear, once2),
                               ("", linear, 0.)) in

    window2("Once", 10., t, s1, s2)

node test_once_timed () =
    let rec t = 0. fby (t +. tstep) in

    let p1 = -. sawtooth () -. q_lt(t, 6.) in
    let p2 = sawtooth () +. q_gt(t, 1.) in

    let once1 = once_timed 5. (tstep, p1) in
    let once2 = once_timed 5. (tstep, p2) in

    let s1 = scope3(-10., 10., ("p1", linear, p1), ("p2", linear, p2),
                               ("", linear, 0.)) in
    let s2 = scope3(-10., 10., ("once_timed 5. p1", linear, once1),
                               ("once_timed 5. p2", linear, once2),
                               ("", linear, 0.)) in

    window2("Once Timed", 10., t, s1, s2)

node test_onceBfromlastA () =
    let rec t = 0. fby (t +. tstep) in

    let true_value = 1. in
    let false_value = -1. in

    let a =
        present
            | (b_up (t >= 2.)) -> true_value
            | (b_up (t >= 3.)) -> false_value
            | (b_up (t >= 6.)) -> true_value
            | (b_up (t >= 6.4)) -> false_value
        init false_value
    and b =
        present
            | (b_up (t >= 0.5)) -> true_value
            | (b_up (t >= 1.5)) -> false_value
            | (b_up (t >= 4.)) -> true_value
            | (b_up (t >= 4.5)) -> false_value
        init false_value
    in

    let phi = onceBfromlastA(a, b) in

    let s1 = scope2(false_value, true_value, ("a", linear, a),
                                             ("", linear, 0.)) in
    let s2 = scope2(false_value, true_value, ("b", linear, b),
                                             ("", linear, 0.)) in
    let s3 = scope2(false_value, true_value,
                    ("phi", linear, phi),
                    ("", linear, 0.)) in

    window3("Once B from last A", 10., t, s1, s2, s3)

node test_onceBfromfirstA () =
    let rec t = 0. fby (t +. tstep) in

    let true_value = 1. in
    let false_value = -1. in

    let a =
        present
            | (b_up (t >= 2.)) -> true_value
            | (b_up (t >= 3.)) -> false_value
            | (b_up (t >= 6.)) -> true_value
            | (b_up (t >= 6.4)) -> false_value
        init false_value
    and b =
        present
            | (b_up (t >= 0.5)) -> true_value
            | (b_up (t >= 1.5)) -> false_value
            | (b_up (t >= 4.)) -> true_value
            | (b_up (t >= 4.5)) -> false_value
        init false_value
    in

    let phi = onceBfromfirstA(a, b) in

    let s1 = scope2(false_value, true_value, ("a", linear, a),
                                             ("", linear, 0.)) in
    let s2 = scope2(false_value, true_value, ("b", linear, b),
                                             ("", linear, 0.)) in
    let s3 = scope2(false_value, true_value,
                    ("phi", linear, phi),
                    ("", linear, 0.)) in

    window3("Once B from first A", 10., t, s1, s2, s3)

node test_alwaysBfromlastA () =
    let rec t = 0. fby (t +. tstep) in

    let true_value = 1. in
    let false_value = -1. in

    let a =
        present
            | (b_up (t >= 2.)) -> true_value
            | (b_up (t >= 3.)) -> false_value
            | (b_up (t >= 6.)) -> true_value
            | (b_up (t >= 6.4)) -> false_value
        init false_value
    and b =
        present
            | (b_up (t >= 0.5)) -> true_value
            | (b_up (t >= 1.5)) -> false_value
            | (b_up (t >= 2.)) -> true_value
            | (b_up (t >= 2.5)) -> false_value
            | (b_up (t >= 6.2)) -> true_value
            | (b_up (t >= 7.)) -> false_value
        init false_value
    in

    let phi = alwaysBfromlastA(a, b) in

    let s1 = scope2(false_value, true_value, ("a", linear, a),
                                             ("", linear, 0.)) in
    let s2 = scope2(false_value, true_value, ("b", linear, b),
                                             ("", linear, 0.)) in
    let s3 = scope2(false_value, true_value,
                    ("phi", linear, phi),
                    ("", linear, 0.)) in

    window3("Always B from last A", 10., t, s1, s2, s3)

node test_alwaysBfromfirstA () =
    let rec t = 0. fby (t +. tstep) in

    let true_value = 1. in
    let false_value = -1. in

    let a =
        present
            | (b_up (t >= 2.)) -> true_value
            | (b_up (t >= 3.)) -> false_value
            | (b_up (t >= 6.)) -> true_value
            | (b_up (t >= 6.4)) -> false_value
        init false_value
    and b =
        present
            | (b_up (t >= 0.5)) -> true_value
            | (b_up (t >= 1.5)) -> false_value
            | (b_up (t >= 2.)) -> true_value
            | (b_up (t >= 2.5)) -> false_value
            | (b_up (t >= 6.2)) -> true_value
            | (b_up (t >= 7.)) -> false_value
        init false_value
    in

    let phi = alwaysBfromfirstA(a, b) in

    let s1 = scope2(false_value, true_value, ("a", linear, a),
                                             ("", linear, 0.)) in
    let s2 = scope2(false_value, true_value, ("b", linear, b),
                                             ("", linear, 0.)) in
    let s3 = scope2(false_value, true_value,
                    ("phi", linear, phi),
                    ("", linear, 0.)) in

    window3("Always B from first A", 10., t, s1, s2, s3)

node test_onceBfromlastA_timed () =
    let rec t = 0. fby (t +. tstep) in

    let true_value = 1. in
    let false_value = -1. in

    let a =
        present
            | (b_up (t >= 2.)) -> true_value
            | (b_up (t >= 3.)) -> false_value
            | (b_up (t >= 6.)) -> true_value
            | (b_up (t >= 6.4)) -> false_value
        init false_value
    and b =
        present
            | (b_up (t >= 0.5)) -> true_value
            | (b_up (t >= 1.5)) -> false_value
            | (b_up (t >= 4.)) -> true_value
            | (b_up (t >= 4.5)) -> false_value
        init false_value
    in

    let phi = onceBfromlastA_timed 2. (tstep, a, b) in

    let s1 = scope2(-2., 2., ("a", linear, a),
                             ("", linear, 0.)) in
    let s2 = scope2(-2., 2., ("b", linear, b),
                             ("", linear, 0.)) in
    let s3 = scope2(-2., 2.,
                    ("phi", linear, phi),
                    ("", linear, 0.)) in

    window3("Once B from last A in 2 seconds", 10., t, s1, s2, s3)

node test_onceBfromfirstA_timed () =
    let rec t = 0. fby (t +. tstep) in

    let true_value = 1. in
    let false_value = -1. in

    let a =
        present
            | (b_up (t >= 2.)) -> true_value
            | (b_up (t >= 3.)) -> false_value
            | (b_up (t >= 6.)) -> true_value
            | (b_up (t >= 6.4)) -> false_value
        init false_value
    and b =
        present
            | (b_up (t >= 0.5)) -> true_value
            | (b_up (t >= 1.5)) -> false_value
            | (b_up (t >= 4.)) -> true_value
            | (b_up (t >= 4.5)) -> false_value
        init false_value
    in

    let phi = onceBfromfirstA_timed 2.5 (tstep, a, b) in

    let s1 = scope2(-2.5, 2.5, ("a", linear, a),
                               ("", linear, 0.)) in
    let s2 = scope2(-2.5, 2.5, ("b", linear, b),
                               ("", linear, 0.)) in
    let s3 = scope2(-2.5, 2.5,
                    ("phi", linear, phi),
                    ("", linear, 0.)) in

    window3("Once B from first A in 2.5 seconds", 10., t, s1, s2, s3)

node test_alwaysBfromlastA_timed () =
    let rec t = 0. fby (t +. tstep) in

    let true_value = 1. in
    let false_value = -1. in

    let a =
        present
            | (b_up (t >= 2.)) -> true_value
            | (b_up (t >= 3.)) -> false_value
            | (b_up (t >= 6.)) -> true_value
            | (b_up (t >= 6.4)) -> false_value
        init false_value
    and b =
        present
            | (b_up (t >= 0.5)) -> true_value
            | (b_up (t >= 1.5)) -> false_value
            | (b_up (t >= 2.)) -> true_value
            | (b_up (t >= 2.5)) -> false_value
            | (b_up (t >= 6.2)) -> true_value
            | (b_up (t >= 7.)) -> false_value
        init false_value
    in

    let phi = alwaysBfromlastA_timed 1. (tstep, a, b) in

    let s1 = scope2(false_value, true_value, ("a", linear, a),
                                             ("", linear, 0.)) in
    let s2 = scope2(false_value, true_value, ("b", linear, b),
                                             ("", linear, 0.)) in
    let s3 = scope2(false_value, true_value,
                    ("phi", linear, phi),
                    ("", linear, 0.)) in

    window3("Always B from last A for 1 seconds", 10., t, s1, s2, s3)

node test_alwaysBfromfirstA_timed () =
    let rec t = 0. fby (t +. tstep) in

    let true_value = 1. in
    let false_value = -1. in

    let a =
        present
            | (b_up (t >= 2.)) -> true_value
            | (b_up (t >= 3.)) -> false_value
            | (b_up (t >= 6.)) -> true_value
            | (b_up (t >= 6.4)) -> false_value
        init false_value
    and b =
        present
            | (b_up (t >= 0.5)) -> true_value
            | (b_up (t >= 1.5)) -> false_value
            | (b_up (t >= 2.)) -> true_value
            | (b_up (t >= 2.5)) -> false_value
            | (b_up (t >= 2.7)) -> true_value
            | (b_up (t >= 2.9)) -> false_value
            | (b_up (t >= 6.2)) -> true_value
            | (b_up (t >= 7.)) -> false_value
        init false_value
    in

    let phi = alwaysBfromfirstA_timed 1. (tstep, a, b) in

    let s1 = scope2(-2., 2., ("a", linear, a),
                             ("", linear, 0.)) in
    let s2 = scope2(-2., 2., ("b", linear, b),
                             ("", linear, 0.)) in
    let s3 = scope2(-2., 2.,
                    ("phi", linear, phi),
                    ("", linear, 0.)) in

    window3("Always B from first A for 1 seconds", 10., t, s1, s2, s3)

node test_onceBfromlastAtoC () =
    let rec t = 0. fby (t +. tstep) in

    let true_value = 1. in
    let false_value = -1. in

    let a =
        present
            | (b_up (t >= 2.)) -> true_value
            | (b_up (t >= 3.)) -> false_value
            | (b_up (t >= 6.)) -> true_value
            | (b_up (t >= 6.4)) -> false_value
        init false_value
    and b =
        present
            | (b_up (t >= 0.5)) -> true_value
            | (b_up (t >= 1.5)) -> false_value
            | (b_up (t >= 4.)) -> true_value
            | (b_up (t >= 4.5)) -> false_value
        init false_value
    and c =
        present
            | (b_up (t >= 3.)) -> true_value
            | (b_up (t >= 4.)) -> false_value
            | (b_up (t >= 5.5)) -> true_value
            | (b_up (t >= 5.6)) -> false_value
            | (b_up (t >= 6.5)) -> true_value
            | (b_up (t >= 6.6)) -> false_value
        init false_value
    in

    let phi = onceBfromlastAtoC(a, b, c) in

    let s1 = scope2(false_value, true_value, ("a", linear, a),
                                             ("", linear, 0.)) in
    let s2 = scope2(false_value, true_value, ("b", linear, b),
                                             ("", linear, 0.)) in
    let s3 = scope2(false_value, true_value, ("c", linear, c),
                                             ("", linear, 0.)) in
    let s4 = scope2(false_value, true_value,
                    ("phi", linear, phi),
                    ("", linear, 0.)) in

    window4("Once B from last A to C", 10., t, s1, s2, s3, s4)

node test_onceBfromfirstAtoC () =
    let rec t = 0. fby (t +. tstep) in

    let true_value = 1. in
    let false_value = -1. in

    let a =
        present
            | (b_up (t >= 2.)) -> true_value
            | (b_up (t >= 3.)) -> false_value
            | (b_up (t >= 6.)) -> true_value
            | (b_up (t >= 6.4)) -> false_value
        init false_value
    and b =
        present
            | (b_up (t >= 0.5)) -> true_value
            | (b_up (t >= 1.5)) -> false_value
            | (b_up (t >= 4.)) -> true_value
            | (b_up (t >= 4.5)) -> false_value
        init false_value
    and c =
        present
            | (b_up (t >= 3.)) -> true_value
            | (b_up (t >= 4.)) -> false_value
            | (b_up (t >= 5.5)) -> true_value
            | (b_up (t >= 5.6)) -> false_value
            | (b_up (t >= 6.5)) -> true_value
            | (b_up (t >= 6.6)) -> false_value
        init false_value
    in

    let phi = onceBfromfirstAtoC(a, b, c) in

    let s1 = scope2(false_value, true_value, ("a", linear, a),
                               ("", linear, 0.)) in
    let s2 = scope2(false_value, true_value, ("b", linear, b),
                               ("", linear, 0.)) in
    let s3 = scope2(false_value, true_value, ("c", linear, c),
                               ("", linear, 0.)) in
    let s4 = scope2(false_value, true_value,
                    ("phi", linear, phi),
                    ("", linear, 0.)) in

    window4("Once B from first A to C", 10., t, s1, s2, s3, s4)

node test_alwaysBfromlastAtoC () =
    let rec t = 0. fby (t +. tstep) in

    let true_value = 1. in
    let false_value = -1. in

    let a =
        present
            | (b_up (t >= 2.)) -> true_value
            | (b_up (t >= 3.)) -> false_value
            | (b_up (t >= 6.)) -> true_value
            | (b_up (t >= 6.4)) -> false_value
        init false_value
    and b =
        present
            | (b_up (t >= 0.5)) -> true_value
            | (b_up (t >= 1.5)) -> false_value
            | (b_up (t >= 2.4)) -> true_value
            | (b_up (t >= 3.5)) -> false_value
            | (b_up (t >= 6.)) -> true_value
            | (b_up (t >= 7.)) -> false_value
        init false_value
    and c =
        present
            | (b_up (t >= 3.)) -> true_value
            | (b_up (t >= 4.)) -> false_value
            | (b_up (t >= 6.5)) -> true_value
            | (b_up (t >= 6.6)) -> false_value
            | (b_up (t >= 8.5)) -> true_value
            | (b_up (t >= 8.6)) -> false_value
        init false_value
    in

    let phi = alwaysBfromlastAtoC(a, b, c) in

    let s1 = scope2(false_value, true_value, ("a", linear, a),
                               ("", linear, 0.)) in
    let s2 = scope2(false_value, true_value, ("b", linear, b),
                               ("", linear, 0.)) in
    let s3 = scope2(false_value, true_value, ("c", linear, c),
                               ("", linear, 0.)) in
    let s4 = scope2(false_value, true_value,
                    ("phi ", linear, phi),
                    ("", linear, 0.)) in

    window4("Always B from last A to C", 10., t, s1, s2, s3, s4)

node test_alwaysBfromfirstAtoC () =
    let rec t = 0. fby (t +. tstep) in

    let true_value = 1. in
    let false_value = -1. in

    let a =
        present
            | (b_up (t >= 2.)) -> true_value
            | (b_up (t >= 3.)) -> false_value
            | (b_up (t >= 6.)) -> true_value
            | (b_up (t >= 6.4)) -> false_value
        init false_value
    and b =
        present
            | (b_up (t >= 0.5)) -> true_value
            | (b_up (t >= 1.5)) -> false_value
            | (b_up (t >= 2.)) -> true_value
            | (b_up (t >= 3.5)) -> false_value
            | (b_up (t >= 6.)) -> true_value
            | (b_up (t >= 7.)) -> false_value
        init false_value
    and c =
        present
            | (b_up (t >= 3.)) -> true_value
            | (b_up (t >= 4.)) -> false_value
            | (b_up (t >= 6.5)) -> true_value
            | (b_up (t >= 6.6)) -> false_value
            | (b_up (t >= 8.5)) -> true_value
            | (b_up (t >= 8.6)) -> false_value
        init false_value
    in

    let phi = alwaysBfromfirstAtoC(a, b, c) in

    let s1 = scope2(false_value, true_value, ("a", linear, a),
                               ("", linear, 0.)) in
    let s2 = scope2(false_value, true_value, ("b", linear, b),
                               ("", linear, 0.)) in
    let s3 = scope2(false_value, true_value, ("c", linear, c),
                               ("", linear, 0.)) in
    let s4 = scope2(false_value, true_value,
                    ("phi", linear, phi),
                    ("", linear, 0.)) in

    window4("Always B from first A to C", 10., t, s1, s2, s3, s4)
