(*
  This example is adapted from a Simulink model:
  https://fr.mathworks.com/help/simulink/examples/modeling-an-automatic-transmission-controller.html
*)

(** constants **)

let static timestep = 0.01

(** utils **)

let node integrate_and_saturate(dx, x0, xmin, xmax) = x where
  rec aux = x0 -> (pre aux +. dx *. timestep)
  and x = max xmin (min xmax aux)

(** algorithm **)

let node engine(ti, throttle) = rpm where
  rec te = Common.lookup_engine(throttle, pre rpm)
  and drpm = te -. ti
  and rpm = integrate_and_saturate (Common.engine_feedback_gain *. drpm, 1000., 600., 6000.)

let node gearlogic(shift) = gear where
  rec init gear = 1.
  and automaton
      | First  ->
          do
          until shift(Common.UP)
            then do next gear = 2. in Second
      | Second ->
          do
          until shift(Common.DOWN)
            then do next gear = 1. in First
          else  shift(Common.UP)
            then do next gear = 3. in Third
      | Third  ->
          do
          until shift(Common.DOWN)
            then do next gear = 2. in Second
          else  shift(Common.UP)
            then do next gear = 4. in Fourth
      | Fourth ->
          do
          until shift(Common.DOWN)
            then do next gear = 3. in Third

let node shiftlogic(speed, throttle) = gear where
  rec up_th = Common.lookup_interpup(throttle, gear)
  and dn_th = Common.lookup_interpdn(throttle, gear)

  and gear = gearlogic(shift)

  and automaton
      | SteadyState  ->
          do
          until (speed < dn_th)
            then DownShifting
          else (speed > up_th)
            then UpShifting
      | DownShifting ->
          local t in
          do
            t = 0. -> (pre t +. timestep)
          until (speed > dn_th)
            then SteadyState
          else (t > Common.twait)
            then do emit shift = Common.DOWN in SteadyState
      | UpShifting   ->
          local t in
          do
            t = 0. -> (pre t +. timestep)
          until (speed < up_th)
            then SteadyState
          else (t > Common.twait)
            then do emit shift = Common.UP in SteadyState

let node vehicle(out_torque, brake_torque) = (speed, trans_rpm) where
  rec final_drive_ratio = Common.p_final_drive_ratio *. out_torque
  and aux1 = final_drive_ratio -. (0. -> pre signed_load)
  and vehicle_inertia = Common.iv_inv *. aux1
  and wheel_speed = Common.p_initial_wheel_speed ->
    (pre wheel_speed +. vehicle_inertia *. timestep)
  and linear_speed = Common.l_speed_coef *. wheel_speed
  and mph = Common.p_mph *. linear_speed
  and road_load = Common.p_drag_friction +. Common.p_aerodynamic_drag *. mph *. mph
  and sgn = Basics.bad_sgn mph
  and brake = brake_torque +. road_load
  and signed_load = sgn *. brake

  and trans_rpm = Common.p_final_drive_ratio *. wheel_speed
  and speed = mph

let node autotrans(throttle, brake_torque) = (rpm, gear, speed) where
  rec rpm = engine(ti, throttle)
  and gear = shiftlogic(speed, throttle)
  and ti, out_torque = Common.transmission(1000. -> pre rpm,
                                           1. -> pre gear,
                                           1000. -> pre trans_rpm)
  and speed, trans_rpm = vehicle(out_torque, brake_torque)

let node passing_maneuver() = throttle, brake_torque where
  rec brake_torque = 0.
  and throttle = 60. -> (pre throttle +. pre dthrottle *. timestep)
  and automaton
      | State1 ->
          do
            dthrottle = -20. /. 14.9
          unless (throttle < 40.)
            then State2
      | State2 ->
          do
            dthrottle = 600.
          unless (throttle > 100.)
            then State3
      | State3 ->
          do
            dthrottle = (58.8235 -. 100.) /. (50. -. 15.)
          unless (throttle <= 0.)
            then State4
      | State4 ->
          do
            dthrottle = 0.
          done

let node gradual_acceleration() = throttle, 0. where
  rec derthrottle = (24. -. 13.4) /. 50.
  and throttle = 13.4 -> (pre throttle +. timestep *. derthrottle)

let node hard_braking(t) = throttle, brake_torque where
      throttle = if t >= 5.1 then 1. else 50.
  and brake_torque = if t >= 10. then 325. else 0.

let node coasting(t) = throttle, brake_torque where
      throttle = if t >= 4.8 then 1. else 80.
  and brake_torque = 0.

open Scope

let node main() =
  let rec t = 0. -> (pre t +. timestep)

  and throttle, brake_torque = passing_maneuver()
  and rpm, gear, speed = autotrans(throttle, brake_torque) in

  let s1 = scope2(0., 325., ("throttle", linear, throttle),
                            ("brake torque", linear, brake_torque))
  and s2 = scope (0., 4., ("gear", linear, gear))
  and s3 = scope (0., 200., ("speed", linear, speed))
  and s4 = scope (600., 6000., ("rpm", linear, rpm)) in

  window4("Autotrans (discrete) - step: " ^
          (string_of_float timestep) ^ "s", 50., t, s1, s2, s3, s4)
