(* Property taken from
 *
 * Hoxha, B., Abbas, H., and Fainekos, G. E. (2014).
 * Benchmarks for temporal logic requirements for automotive systems.
 * In ARCH@CPSWeek.
 *
 * page 28
*)

let static tstep   = 0.05
let static maxt    = 30.0

open Obs
open Spec

node maneuver tstep = scenario tstep

(*
    If the car switches from gear 2 to gear 1, then it will never come back
    to gear 2 for 2.5 seconds

    □((g2 ∧ ◇_[0,eps] g1) ⇒ □_[0,2.5] ¬g2)
      \_________________\  -> going from gear 2 to gear 1
  = □((edge g1 ∧ pre g2) ⇒ □_[0,2.5] ¬g2)
*)

node phi3((throttle, brake_torque), (rpm, gear, speed)) =
    let g1 = p_eqi (gear, 1.) in
    let g2 = p_eqi (gear, 2.) in
    let ng2 = p_not g2 in
    (* g2 was true then g1 became true just now *)
    let g1_g2 = p_and (p_false fby g2, p_edge g1) in
    (* g1_g2, NotYet *)
    d_trigger (d_always_l 2.5) (tstep, (g1_g2, ng2))

open Scope

node show(t, (throttle, brake_torque), (rpm, gear, speed), (phi_r, phi_s)) =
    let s1 = scope2(0.  , 350. , ("throttle", linear, throttle),
                                   ("brake torque", linear, brake_torque))
    and s2 = scope (0.  , 4.   , ("gear", linear, gear))
    and s3 = scope (0.  , 200. , ("speed", linear, speed))
    and s4 = scope (600., 6000., ("rpm", linear, rpm))
    and s5 = scope2( -1.,    2., ("□((edge g1 ∧ pre g2) ⇒ □<sub>[0,2.5]</sub> ¬g2)", linear, phi_r),
                                  ("[state: 0 = NotYet 1 = Done]", linear, phi_s)) in

    window5("Autotrans spec", 50., t, s1, s2, s3, s4, s5)

node cli  () = cli  maneuver phi3 Autotransd.autotrans maxt tstep
node plot () = plot maneuver phi3 Autotransd.autotrans show tstep
