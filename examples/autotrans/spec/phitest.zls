(* Property taken from
 *
 * Hoxha, B., Abbas, H., and Fainekos, G. E. (2014).
 * Benchmarks for temporal logic requirements for automotive systems.
 * In ARCH@CPSWeek.
 *
 * page 28
*)

let static epsilon = 0.05

open Maneuvers

let hybrid maneuver () = hard_braking_c ()

(*
    For i in [1;4], if the car switches from any gear but i to gear i, it will
    stay in gear i for at least 2.5 seconds

    ∧^4_i=1 □((¬gi ∧ ◇_[0,eps] gi) ⇒ □_[0,2.5] gi)
              \__________________\  -> going from any gear but i to gear i
  = ∧^4_i=1 □(¬gi ⇒ (□_[0,eps] ¬gi ∨ □_[0,2.5] ¬gi))
*)

open Obs

open Obstypes
open Scope

let hybrid plot () =
    let rec der t = 1. init 0.

    and throttle, brake_torque = maneuver()
    and rpm, gear, speed = Autotransc.autotrans(throttle, brake_torque) in

    let g2 = p_eqi(2.) gear in
    (* let phi = (f_trigger
        (f_or
            (f_always_l epsilon)
            (f_always_l     2.5))) (not g2, not g2)
    in *)

    let
    rec init st1 = NotYet
    and init st2 = NotYet
    and automaton
        | Main ->
            do  e1 = f_always_l epsilon (not g2)
            and e2 = f_always_l     2.5 (not g2)
            and st1 = value_of_obsval e1 and st2 = value_of_obsval e2
            and automaton
                | I ->
                    let s1 = firstvalue_of_obsval e1
                    and s2 = firstvalue_of_obsval e2
                    and fe1 = firstoccurence_of_obsval e1
                    and fe2 = firstoccurence_of_obsval e2
                    in
                    do until
                          fe1(True)
                        | fe2(True)
                        then do emit e = True in Top
                    else
                          fe1(False) on (s2 = False)
                        | fe2(False) on (s1 = False)
                        then do emit e = False in Bot
                | Top ->
                    do until
                          e1(False) on (st2 = False)
                        | e2(False) on (st1 = False)
                        then do emit e = False in Bot
                    else
                          e1(NotYet) on (st2 <> True)
                        | e2(NotYet) on (st1 <> True)
                        then do emit e = NotYet and emit rst in I
                | Bot ->
                    do until
                          e1(True)
                        | e2(True)
                        then do emit e = True in Top
                    else
                          e1(NotYet) on (st2 <> True)
                        | e2(NotYet) on (st1 <> True)
                        then do emit e = NotYet and emit rst in I
            until rst() then Main
    in

    (* let rec phi_val = firstvalue_of_obsval phi
    and phi_float = float_of_val phi_val in *)

    let e1_float = 0.0 +. 0.3 *. float_of_obsval e1
    and e2_float = 0.7 +. 0.3 *. float_of_obsval e2
    and e_float  = 1.4 +. 0.3 *. float_of_obsval e in

    present
      | (period(0.1)) | (* phi(True) | phi(NotYet) | *) e1(_) | e2(_) | e(_) ->
          let s1 = scope2(0.  , 325. , ("throttle", linear, throttle),
                                       ("brake torque", linear, brake_torque))
          and s2 = scope (0.  , 4.   , ("gear", linear, gear))
          and s3 = scope3(-0.3, 1.7  , ("e1", linear, e1_float),
                                       ("e2", linear, e2_float),
                                       ("e" , linear, e_float))
          and s4 = scope (600., 6000., ("rpm", linear, rpm))
          (* and s5 = scope ( -1.,    1., (
              "□((¬g2 ∧ ◇<sub>[0," ^ (string_of_float epsilon) ^ "]</sub> g2) ⇒ □<sub>[0,2.5]</sub> g2)" ^
              " = □(¬g2 ⇒ (□<sub>[0,eps]</sub> ¬g2 ∨ □<sub>[0,2.5]</sub> ¬g2))", linear, phi_float)) *)
          in
          window4("Autotrans spec", 4., t, s1, s2, s3, s4)
      (* | phi(False) ->
        (print_string "Got False at t = ";
         print_float t;
         print_endline "\nPress any key to exit ...";
         input_line stdin;
         exit 1) *)
    ;
    present
        | e1(b) -> (print_string "e1:"; print_endline (string_of_value b))
        | e2(b) -> (print_string "e2:"; print_endline (string_of_value b))
        | e (b) -> (print_string "e :"; print_endline (string_of_value b))
    ;
    ()
