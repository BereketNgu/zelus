(* Property taken from
 *
 * Hoxha, B., Abbas, H., and Fainekos, G. E. (2014).
 * Benchmarks for temporal logic requirements for automotive systems.
 * In ARCH@CPSWeek.
 *
 * page 28
*)

let static tstep = 0.05
let static maxt  = 30.0

open Maneuvers
open Spec

let node maneuver t = hard_braking_d t

(*
    After shifting into gear one, there should be no shift from gear one to
    any other gear within 2.5 sec.

    □((¬g1 ∧ X g1) ⇒ □_[0,2.5] g1)
*)

let static dur = 2.5

node phi4(throttle, brake_torque, rpm, gear, speed) =
    let rec t = 0. -> pre t +. tstep in

    let g1 = -. abs_float (gear -. 1.) in

    let rec init aux = 0.
    and automaton
        | Init(v) ->
            do res = v
            until ((false -> (pre g1 < 0.)) && (g1 >= 0.))
            then Main(t)
        | Main(t0) ->
            do
                aux = g1 -> min (pre aux) g1
                and res = Some aux
            until (g1 < 0.)                then False(res)
            else  (t > t0 +. dur -. tstep) then Init(res)
        | False(v) ->
            let init_val = match v with None -> g1 | Some f -> min f g1 in
            do
                aux = init_val -> min (pre aux) g1
                and res = Some aux
            done
    init Init(None) in
    res

open Scope

node show(t, throttle, brake_torque, rpm, gear, speed, prop_state) =
    let s1 = scope2(0.  , 325. , ("throttle", linear, throttle),
                                 ("brake torque", linear, brake_torque))
    and s2 = scope (0.  , 4.   , ("gear", linear, gear))
    and s3 = scope (0.  , 200. , ("speed", linear, speed))
    and s4 = scope (600., 6000., ("rpm", linear, rpm))
    and s5 = scope2( -4.,    4., ("□((¬g1 ∧ X g1) ⇒ □<sub>[0," ^ (string_of_float dur) ^ "]</sub> g1)", linear, prop_state),
                                 ("zero", linear, 0.)) in

    window5("Autotrans: phi4", 50., t, s1, s2, s3, s4, s5)

let node cli  () = cli  maneuver phi4 maxt tstep
let node plot () = plot maneuver phi4 show tstep
