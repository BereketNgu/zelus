(* http://www.vergenet.net/~conrad/boids/pseudocode.html *)
(* + code RML de Baudart et Mandel *)

open Utils
  
(* Rules *)

(* Rule 1: fly towards the center of mass *)
let node rule1(n)(bj, all) = (center_aux -: bj.position) /: (float 100) where
  rec
      forall i in 0 .. (n-1), bi in all
        do
          if bj <> bi then do center = last center +: bi.position done
	initialize
	  last center = vzero
	done
  and
      center_aux = center /: (float (n - 1))

(* Rule 2: keep a small distance from other objects *)
let node rule2(n)(bj, all) = c where
  rec forall i in 0 .. (n-1), bi in all 
        do
          if bi <> bj then
	    if vnorm (bi.position -: bj.position) < 100.0
	    then do c = last c -: (bi.position -: bj.position) done
	initialize
	  last c = vzero
	done

(* Rule 3: try to match velocity of other boids *)
let node rule3(n)(bj, all) = ((pvj /: float (n-1)) -: bj.speed) /: 8.0 where
  rec forall i in 0 .. (n-1), bi in all 
        do
          if bi <> bj then
	    do pvj = last pvj +: bi.speed done
	initialize
	 last pvj = vzero
	done

let node move_all_boids(n)(binit) = b where
  rec
      all = binit fby b
  and
      forall i in 0 .. (n-1), bi in all, bi_out out b
        local v1, v2, v3, speed, position
        do
	  v1 = rule1(n)(bi, all)
	and
	  v2 = rule2(n)(bi, all)
	and
	  v3 = rule3(n)(bi, all)
	and
	  speed = (vzero fby speed) +: v1 +: v2 +: v3
	and
	  position = (vzero fby position) +: speed
	and
	  bi_out = { id = 0; family = 0; position = position;
		     speed = speed; acceleration = vzero }
	done
		
