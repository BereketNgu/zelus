(* http://www.vergenet.net/~conrad/boids/pseudocode.html *)
(* + code RML de Baudart et Mandel *)

open Utils

let set_color boid =
  match boid.family with
  | -1 -> Graphics.set_color Graphics.white
  | 0 -> Graphics.set_color Graphics.red
  | 1 -> Graphics.set_color Graphics.blue
  | 2 -> Graphics.set_color Graphics.green
  | 3 | _ -> Graphics.set_color Graphics.black
  end

let node draw_boid boid =
  let init x =
    let pos = boid.position in
    set_color boid;
    Graphics.fill_circle
      (int_of_float pos.x)
      (int_of_float pos.y)
      2 in
  let automaton
  | Draw ->
      let _ = set_color boid in
      let _ =
	Graphics.fill_circle
	  (int_of_float pos.x)
	  (int_of_float pos.y)
	  1 in
      let rec cpt = 1 -> pre cpt + 1 in
      do done
  | Stop -> do done in
  ()

let node read_inputs mouse_click = key where
  rec if Graphics.key_pressed() then
	do emit key = Graphics.read_key() done
      else
	let click = Graphics.button_down() in
	do if click & not (false fby click) then
	  do emit mouse_click = vmouse () done done

let in_bounds (min_x, max_x, min_y, max_y) boid =
  min_x <= boid.position.x && boid.position.x <= max_x &&
  min_y <= boid.position.y && boid.position.y <= max_y

let check_bounds ((min_x, max_x, min_y, max_y), boid) =
  let pos_x, v_x =
    if boid.position.x < min_x then (min_x, abs_float boid.speed.x)
    else if boid.position.x > max_x then (max_x, -. (abs_float boid.speed.x))
    else (boid.position.x, boid.speed.x)
  in
  let pos_y, v_y =
    if boid.position.y < min_y then (min_y, abs_float boid.speed.y)
    else if boid.position.y > max_y then (max_y, -.(abs_float boid.speed.y))
    else (boid.position.y, boid.speed.y)
  in
  { boid with
    position = { x = pos_x ; y = pos_y; };
    speed = { x = v_x; y = v_y; }; }

let in_sight angle me boid =
  (me.id = boid.id) or
  let dir = me.speed in
  dir = vzero or
  let sep = boid.position -: me.position in
  (vcos dir sep) > angle

(* Rules *)

(* Rule 1: fly towards the center of mass *)
let node rule1(n)(bj, all) = (center_aux -: bj.position) /: (float 100) where
  rec
      forall i in 0 .. (n-1), bi in all
        do
          if bj <> bi then do center = last center +: bi.position done
	initialize
	  last center = vzero
	done
  and
      center_aux = center /: (float (n - 1))

(* Rule 2: keep a small distance from other objects *)
let node rule2(n)(bj, all) = c where
  rec forall i in 0 .. (n-1), bi in all 
        do
          if bi <> bj then
	    if vnorm (bi.position -: bj.position) < 100.0
	    then do c = last c -: (bi.position -: bj.position) done
	initialize
	  last c = vzero
	done

(* Rule 3: try to match velocity of other boids *)
let node rule3(n)(bj, all) = ((pvj /: float (n-1)) -: bj.speed) /: 8.0 where
  rec forall i in 0 .. (n-1), bi in all 
        do
          if bi <> bj then
	    do pvj = last pvj +: bi.speed done
	initialize
	 last pvj = vzero
	done

(* Rule 4: bounding the position *)
let node rule4(n)(b, all) = { x = vx; y = vy } where
  rec
    if b.position.x < bounds.xmin then
      do vx = 10.0 done
    else if b.position.x > bounds.xmax then
      do vx = -10.0  done
    else do vx = 0.0 done
  and
    if b.position.y < bounds.ymin then
      do vy = 10.0  done
    else if b.position.y > bounds.ymax then
      do vy = -10.0  done
    else do vy = 0.0 done
	  
let node move_all_boids(n)(binit) = b where
  rec
      all = binit fby b
  and
      forall i in 0 .. (n-1), bi in all, bi_out out b
        local v1, v2, v3, v4, speed, position
        do
	  v1 = rule1(n)(bi, all)
	and
	  v2 = rule2(n)(bi, all)
	and
	  v3 = rule3(n)(bi, all)
	and
	  v4 = rule4(n)(bi, all)
	and
	  speed = (vzero fby speed) +: v1 +: v2 +: v3
	and
	  position = (vzero fby position) +: speed
	and
	  bi_out = { id = 0; family = 0; position = position;
		     speed = speed; acceleration = vzero }
	done
		
