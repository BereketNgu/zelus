open Obs

let static sampling = 0.005
let static tol = 0.05
let static reference = 20.
let static minT = 0.01
let static maxT = 0.1

let in_range_en = "Once the temperature is within a " ^
                (string_of_float tol) ^ " degrees range of the referenceerence " ^
                "temperature (" ^ (string_of_float reference) ^ "°C)" ^
                ", it stays within that range"
let in_range_phi = "□(|temp - reference| &#60; " ^ (string_of_float tol) ^
                   " ⇒ □(|temp - reference| &#60; " ^ (string_of_float tol) ^
                   "))"

node in_range(temp) =
    let diff = abs_float (temp -. reference) in
    let diff_lt_tol = p_lt (diff, tol) in
    d_trigger (d_always) (sampling, (diff_lt_tol, diff_lt_tol))

let blink_en = "The led light always blinks : it cannot be on for more than " ^
               (string_of_float minT) ^ "s or for less than " ^
               (string_of_float maxT) ^ "s at a time."
let blink_phi = "□(edge (led = RED) ⇒ □<sub>[0," ^ (string_of_float minT) ^
                "]</sub>(led = RED)) ∧" ^
                "□(edge (led = GREEN) ⇒ □<sub>[0," ^ (string_of_float minT) ^
                "]</sub>(led = GREEN)) ∧" ^
                "□(edge (led = RED) ⇒ ◇<sub>[0," ^ (string_of_float minT) ^
                "]</sub>(not (led = RED))) ∧" ^
                "□(edge (led = GREEN) ⇒ ◇<sub>[0," ^ (string_of_float minT) ^
                "]</sub>(not (led = GREEN)))"
node blink(led) =
    let led_red   = if led = Bangbang.red   then 1. else -1. in
    let led_green = if led = Bangbang.green then 1. else -1. in
    d_and
        (d_and
            (d_trigger (d_always_l minT))
            (d_trigger (d_always_l minT)))
        (d_and
            (d_trigger (d_next maxT))
            (d_trigger (d_next maxT)))
        (sampling,
            (((p_edge led_red, led_red),
              (p_edge led_green, led_green)),
             ((p_edge led_red, -. led_red),
              (p_edge led_green, -. led_green))))

open Scope

hybrid plot() =
    let der t = 1. init 0. in

    let x_init = 10. in
    let led, on_off, temp = Bangbang.model() in


    present (period(sampling)) ->
        let r_range, s_range = in_range(temp) in
        let r_blink, s_blink = blink(led) in
        let led_red   = if led = Bangbang.red   then 1. else -1. in
        let led_green = if led = Bangbang.green then 1. else -1. in
        let sc1 = scope2(14.0, 21.0, ("temp", linear, temp),
                                     ("reference", linear, reference)) in
        let sc2 = scope2(-1., 3., (in_range_phi, linear, r_range),
                                  ("done?", linear, float_of_state s_range)) in
        (* let sc3 = scope (0.0, 2.0, ("led (0=OFF, 1=RED, 2=GREEN)", points true, float(led))) in *)
        let sc3 = scope2(-1., 1., ("led_red", points false, 0.3 *. (led_red +. 1.5)),
                                  ("led_green", points false, 0.3 *. (led_green -. 1.5))) in
        let sc4 = scope2(-1., 1., (blink_phi, linear, r_blink),
                                  ("done?", linear, float_of_state s_blink)) in
        window4("Spec", 50., t, sc1, sc2, sc3, sc4)
    else ()

hybrid main() =
    let der t = 1. init 0. in

    let x_init = 10. in
    let led, on_off, temp = Bangbang.model() in

    present (period(sampling)) ->
        let r, s = in_range(temp) in

        if r < 0. && s = Obs.NotYet then
            print_endline ("Warning: at t = " ^ (string_of_float t) ^
                " with values temp = " ^ (string_of_float temp) ^
                " and reference = " ^ (string_of_float reference) ^
                ", intermediary robustness was " ^ (string_of_float r))
        else
            (print_string ("t = " ^ (Basics.stdform_of_float 2 2 t) ^
                        "\t\t| temp = " ^ (Basics.stdform_of_float 2 2 temp) ^
                       "\t\t| reference = " ^ (Basics.stdform_of_float 2 2 reference) ^ "\r");
             flush stdout)
        (* phi will never end, s will never be Obs.Done *)
    else ()
