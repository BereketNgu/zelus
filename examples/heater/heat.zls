(* The Heater model presented by Nicolas Halbwachs during *)
(* a tutorial on Lustre, College de France, 2010. *)

(* Integrator Euler (forward) *)
let node euler(h)(x0, xprime) = x
  where rec x = x0 -> pre(x +. h *. xprime)

(* Model of a heater *)
let node heater(h)(c, alpha, beta, temp_ext, temp0, u) = temp where
  rec temp =
    euler(h)(temp0, 
             if u then alpha *. (c -. temp) 
             else beta *. (temp_ext -. temp))

(* Relay (low/high threshold; a single boolean output *)
(* discrete time *)
let node relay(low, high, v) = u where
  rec u = if v < low then true
	  else if v > high then false
	  else false -> pre u

let node relay_bis(low, high, v) = u where
  rec u = present (v < low) -> true | (v > high) -> false init false
      
let node relay_six(low, high, v) = u where
  rec automaton
      | Low -> do u = false unless (v <= low) then High
      | High -> do u = true unless (v >= high) then Low
      end
      
let low = 1.0
let high = 1.0

let c = 50.0

let alpha = 0.1
let beta = 0.1

let h = 0.1

(* Main program *)

let node generic_system(controller)(reference) = (u, temp) where
  rec
      u = run controller(reference -. low, reference +. high, temp)
  and
      temp = heater(h)(c, alpha, beta, 0.0, 0.0, u)

let node system(reference) = generic_system(relay)(reference)

(* Generation of a source. Constant *)
let node piecewise_constant(low)(high)(z) = o where
  rec reset
    init o = Random.float high
  every z

let node linear_constant(h)(low)(slope)(z) = o where
  rec reset
     init o = Random.float low
     and init s = Random.float slope
     and o = last o +. h *. s
   every z

let node source(r) = piecewise_constant(0.0)(20.0)(r)
let node source2(r) = linear_constant(0.1)(0.0)(20.0)(r)
   
(* Oracle. Define the expected property *)
let node oracle(u, reference, measured) = true

(* Test of the system: connect a source generator, the system *)
(* and the oracle *)
let node test () = (r) where
   rec reference = source(r)
   and (u, measured) = system(reference)
   and r = oracle(u, reference, measured)
      
let node main_no_graphics() =
  let u, temp = system(19.0) in
  print_string "u = "; print_string (if u then "true" else "false");
  print_string "   ";
  print_string "temp = "; print_float temp;
  print_newline ();
  flush stdout

(* The main function. *)
let node main() =
   (* create a box for a inputs of type float; initially set at 19 degrees *)
   let init win_desc = Input.frame "Main" (Input.make_float "expected_temp" (0.,68.) 19.) in
   (* create and open the window *)
   let init w = Input.open_window("Inputs", win_desc) in
   (* by default the size of the window is the smallest size possible *)
   let init tmp = Input.resize_window(w, 400, 100) in
   (* read the input *)
   let expected_temp = Input.get_float (w, "expected_temp") in
   (* call the main function *)
   let u, temp = system(expected_temp) in
   let rec time = 0.0 -> pre time +. h in
   (* output the command and actual temperature *)
   let s = Scope.scope2 (-1.0, 40.0, ("u", Scope.points true, if u then 1.0 else 0.0),
                        ("temp", Scope.linear, temp)) in
   Scope.window ("The Heater with a relay controller", 10.0, time, s)
