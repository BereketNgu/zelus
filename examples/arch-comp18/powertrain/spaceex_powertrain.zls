(*
    This is the spaceex implementation of the powertrain, adapted to Zélus.
    It corresponds to the simplest powertrain (theta = 1) and the initial
    set is 5% the size of the original one.

    The spaceex files can be found here : https://cps-vo.org/node/49115

    This example is part of ARCH-COMP2018's benchmarks :

    G. Frehse (ed.), ARCH18 (EPiC Series in Computing, vol. 54), pp. 23–52
*)

let static tstep = 0.005

type initials = {
    x1   : float;
    x2   : float;
    x3   : float;
    x4   : float;
    x5   : float;
    x6   : float;
    x7   : float;
    x8   : float;
    x9   : float;
}

(* outputs: x1, x3 *)
hybrid powertrain(initials) = x1, x2, x3, x4, x5, x6, x7, x8, x9 where
    rec der t = 1. init 0.
    and init x1 = initials.x1 and init x2 = initials.x2
    and init x3 = initials.x3 and init x4 = initials.x4
    and init x5 = initials.x5 and init x6 = initials.x6
    and init x7 = initials.x7 and init x8 = initials.x8
    and init x9 = initials.x9
    and automaton
        | NegAngleInit ->
            do
                    der x1 = 1.0 /. 12.0 *. x7 -. x9
                and der x2 = (0.5 *. (12.0 *. x4 -. x7)
                            +. 0.5 *. (12.0 *. x3 -. 12.0 *. (x1 +. x8))
                            +. 0.5 *. (12.0 *. -5.0 -.
                                      1.0 /. 0.3 *. (x2 -. 1.0 /. 12.0 *.
                                      10000.0 *. (x1 -. -0.03) -. 0.0 *. x7))
                            -. x2) /. 0.1
                and der x3 = x4
                and der x4 = -5.0
                and der x5 = x6
                and der x6 = 1.0 /. 140.0 *.
                             (100000.0 *. (x8 -. x5) -. 5.6 *. x6)
                and der x7 = 1.0 /. 0.3 *. (x2 -. 1.0 /. 12.0 *. 10000.0 *.
                             (x1 -. -.0.03) -. 0.0 *. x7)
                and der x8 = x9
                and der x9 = 0.01 *. (10000.0 *. (x1 -. -0.03) -. 100000.0 *.
                             (x8 -. x5) -. 1.0 *. x9)
            until up(t -. 0.2) then
                do _ = print_endline ("At t = " ^ (Basics.stdform_of_float 2 2 t) ^
                                      ", switched to NegAngle")
                in NegAngle
        | NegAngle ->
            do
                    der x1 = 1.0 /. 12.0 *. x7 -. x9
                and der x2 = (0.5 *. (12.0 *. x4 -. x7)
                            +. 0.5 *. (12.0 *. x3 -. 12.0 *. (x1 +. x8))
                            +. 0.5 *. (12.0 *. 5.0 -.
                                      1.0 /. 0.3 *. (x2 -. 1.0 /. 12.0 *.
                                      10000.0 *. (x1 -. -0.03) -. 0.0 *. x7))
                            -. x2) /. 0.1
                and der x3 = x4
                and der x4 = 5.0
                and der x5 = x6
                and der x6 = 1.0 /. 140.0 *.
                             (100000.0 *. (x8 -. x5) -. 5.6 *. x6)
                and der x7 = 1.0 /. 0.3 *. (x2 -. 1.0 /. 12.0 *. 10000.0 *.
                             (x1 -. -0.03) -. 0.0 *. x7)
                and der x8 = x9
                and der x9 = 0.01 *. (10000.0 *. (x1 -. -0.03) -. 100000.0 *.
                             (x8 -. x5) -. 1.0 *. x9)
            until up(x1 -. -0.03) then
                do _ = print_endline ("At t = " ^ (Basics.stdform_of_float 2 2 t) ^
                                      ", switched to Deadzone")
                in Deadzone
        | Deadzone ->
            do
                    der x1 = 1.0 /. 12.0 *. x7 -. x9
                and der x2 = (0.5 *. (12.0 *. x4 -. x7)
                            +. 0.5 *. (12.0 *. x3 -. 12.0 *. (x1 +. x8))
                            +. 0.5 *. (12.0 *. 5.0 -.
                                      1.0 /. 0.3 *. (x2 -. 1.0 /. 12.0 *.
                                      0.0 *. (x1 -. -0.03) -. 0.0 *. x7))
                            -. x2) /. 0.1
                and der x3 = x4
                and der x4 = 5.0
                and der x5 = x6
                and der x6 = 1.0 /. 140.0 *.
                             (100000.0 *. (x8 -. x5) -. 5.6 *. x6)
                and der x7 = 1.0 /. 0.3 *. (x2 -. 1.0 /. 12.0 *. 0.0 *.
                             (x1 -. -0.03) -. 0.0 *. x7)
                and der x8 = x9
                and der x9 = 0.01 *. (0.0 *. (x1 -. -0.03) -. 100000.0 *.
                             (x8 -. x5) -. 1.0 *. x9)
            until up(x1 -. 0.03) then
                do _ = print_endline ("At t = " ^ (Basics.stdform_of_float 2 2 t) ^
                                      ", switched to PosAngle")
                in PosAngle
            else  up(-0.03 -. x1) then
                do _ = print_endline ("At t = " ^ (Basics.stdform_of_float 2 2 t) ^
                                      ", switched to NegAngle")
                in NegAngle
        | PosAngle ->
            do
                    der x1 = 1.0 /. 12.0 *. x7 -. x9
                and der x2 = (0.5 *. (12.0 *. x4 -. x7)
                            +. 0.5 *. (12.0 *. x3 -. 12.0 *. (x1 +. x8))
                            +. 0.5 *. (12.0 *. 5.0 -.
                                      1.0 /. 0.3 *. (x2 -. 1.0 /. 12.0 *.
                                      10000.0 *. (x1 -. 0.03) -. 0.0 *. x7))
                            -. x2) /. 0.1
                and der x3 = x4
                and der x4 = 5.0
                and der x5 = x6
                and der x6 = 1.0 /. 140.0 *.
                             (100000.0 *. (x8 -. x5) -. 5.6 *. x6)
                and der x7 = 1.0 /. 0.3 *. (x2 -. 1.0 /. 12.0 *. 10000.0 *.
                             (x1 -. 0.03) -. 0.0 *. x7)
                and der x8 = x9
                and der x9 = 0.01 *. (10000.0 *. (x1 -. 0.03) -. 100000.0 *.
                             (x8 -. x5) -. 1.0 *. x9)
            until up(0.03 -. x1) then
                do _ = print_endline ("At t = " ^ (Basics.stdform_of_float 2 2 t) ^
                                      ", switched to Deadzone")
                in Deadzone

let initial_state alpha =
    (* alpha in [0, 1],
       these initial states corresponds to the ones generated by
       Powertrain.initial_state with alpha in [-0.05, 0.05] *)
    let x4 = 29.5 +. alpha in
    {
        x1  = -0.043480000000000005 +. 0.0005600000000000049 *. alpha;
        x2  = -11.2335 +. 0.46699999999999875 *. alpha;
        x3  = 0.0;
        x4  = x4;
        x5  = 0.0;
        x6  = x4;
        x7  = 354.0 +. 12.0 *. alpha;
        x8  = -0.00135 +. 0.00006000000000000016 *. alpha;
        x9  = x4;
    }

open Scope

hybrid main () =
    let der t = 1. init 0. in

    let (x1, x2, x3, x4, x5, x6, x7, x8, x9) =
        powertrain(initial_state 0.5) in

    present (period(tstep)) ->
         (let s = scope(0., 120., ("x3 = theta_ref", linear, x3)) in
         window ("Spaceex powertrain : plot(x1, x3)", 0.4, x1, s);

         let s1 = scope(-5., 5., ("u", linear, if t < 0.2 then -5. else 5.)) in
         let s2 = scope(29., 34., ("x6 = theta_l_der", linear, x6)) in
         let s3 = scope(350., 400., ("x7 = theta_m_der", linear, x7)) in
         let s4 = scope(29., 34., ("x9 = theta_1_der", linear, x9)) in
         window4("Spaceex powertrain : plot(t, x6) and plot(t, x9)", 2.5, t, s1, s2, s3, s4))
    else ()
