#!/usr/bin/env python

def integrate(varname, val):
    return """der %s = %s
        init initials.%s""" % \
            (varname,
             val if len(val) <= 60 else "\n        %s" % val,
             varname)

def integrate_list(l):
    return "\n    and ".join([integrate(*el) for el in l])

def make_der(varname, val):
    return """%s_der = %s""" % \
        (varname,
         val if len(val) <= 60 else "\n        %s" % val)

def make_ders(l):
    return "\n    and ".join([make_der(*el) for el in l])

def mainc(args):
    theta = args.theta
    if theta <= 0:
        print("Theta should be greater than 0")
        exit(1)

    zls = """
hybrid powertrainc (initials, ks, alpha, u) = x where

    (* outputs *)

    rec x = { """

    for i in range(1, 2 * theta + 8):
        zls += """
        x%d = x%d; """ % (i, i)

    zls += """
    }

    (* end of outputs *)

    and x0 = x7 /. gamma -. x9
    and """ + \
    integrate_list([
        ("x1", "x0"),
        ("x2", """(kP *. (gamma *. x4 -. x7)
      +. kI *. (gamma *. x3 -. gamma *. (x1 +. x8))
      +. kD *. (gamma *. u
      -. (x2 -. ks *. (x1 -. alpha) /. gamma -. bm *. x7) /. jm)
      -. x2) /. tau_eng"""),
        ("x3", "x4"),
        ("x4", "u"),
        ("x5", "x6"),
        ("x6", "(ki *. (x%d -. x5) -. bl *. x6) /. jl" % (2 * theta + 6)),
        ("x7", "(x2 -. ks *. (x1 -. alpha) /. gamma -. bm *. x7) /. jm"),
        ("x8", "x9"),
        ("x9", "(ks *. (x1 -. alpha) -. ki *. (x8 -. x%d) -. bi *. x9) *. ji" % \
            (10 if theta > 1 else 5))
    ])

    for i in range(2, theta):
        zls += "\n    and " + integrate_list([
            ("x%d" % (2 * i + 6), "x%d" % (2 * i + 7)),
            ("x%d" % (2 * i + 7),
             "(ki *. (x%d -. x%d) -. ki *. (x%d -. x%d) -. bi *. x%d) *. ji" % \
                (2 * i + 4,
                 2 * i + 6,
                 2 * i + 6,
                 5, # 2 * i + 8,
                 2 * i + 7))
        ])

    if theta > 1:
        zls += "\n    and " + integrate_list([
            ("x%d" % (2 * theta + 6), "x%d" % (2 * theta + 7)),
            ("x%d" % (2 * theta + 7),
             "(ki *. (x%d -. x%d) -. ki *. (x%d -. x5) -. bi *. x%d) *. ji" % \
                (2 * theta + 4,
                 2 * theta + 6,
                 2 * theta + 6,
                 2 * theta + 7))
    ])

    zli = """val powertrainc : values -S-> float * float * float -C-> values """

    return zls, zli

def maind(args):
    theta = args.theta
    if theta <= 0:
        print("Theta should be greater than 0")
        exit(1)


    zls = """
node powertraind h0 maxstep eps (initials, ks, alpha, u) =
    (t, x) where

    (* initial vals *)

    rec
    let init f0 = make %d 0. in
    let """ % (2 * theta + 7) +\
    "\n    and ".join(
        ["init tmp%-2d = set f0 %d initials.x%d " % (i, i, i + 1)
            for i in range(2 * theta + 7)])

    zls += """ in

    do x = { """

    for i in range(1, 2 * theta + 8):
        zls += """
        x%d = x_arr^^%d; """ % (i, i - 1)

    zls += """
    }

    and t, x_arr = dopri maxstep eps
                     powertraind_der
                     powertraind_der
                     powertraind_der
                     powertraind_der
                     powertraind_der
                     powertraind_der
                     powertraind_der
                     h0 0. (f0, (ks, alpha, u))
    done"""

    der_node = """let powertraind_der (t, (ks, alpha, u), x) =
    let rec x0 = (x^^6) /. gamma -. (x^^8)
    and """ + \
    make_ders([
        ("x1", "x0"),
        ("x2", """(kP *. (gamma *. (x^^3) -. (x^^6))
      +. kI *. (gamma *. (x^^2) -. gamma *. ((x^^0) +. (x^^7)))
      +. kD *. (gamma *. u
      -. ((x^^1) -. ks *. ((x^^0) -. alpha) /. gamma -. bm *. (x^^6)) /. jm)
      -. (x^^1)) /. tau_eng"""),
        ("x3", "x^^3"),
        ("x4", "u"),
        ("x5", "x^^5"),
        ("x6", "(ki *. ((x^^%d) -. (x^^4)) -. bl *. (x^^5)) /. jl" % (2 * theta + 5)),
        ("x7", "((x^^1) -. ks *. ((x^^0) -. alpha) /. gamma -. bm *. (x^^6)) /. jm"),
        ("x8", "x^^8"),
        ("x9", "(ks *. ((x^^0) -. alpha) -. ki *. ((x^^7) -. (x^^%d)) -. bi *. (x^^8)) *. ji" % \
            (9 if theta > 1 else 4))
    ])

    for i in range(2, theta):
        der_node += "\n    and " + make_ders([
            ("x%d" % (2 * i + 6), "(x^^%d)" % (2 * i + 6)),
            ("x%d" % (2 * i + 7),
             "(ki *. ((x^^%d) -. (x^^%d)) -. ki *. ((x^^%d) -. (x^^%d)) -. bi *. (x^^%d)) *. ji" % \
                (2 * i + 5,
                 2 * i + 5,
                 2 * i + 5,
                 4, # 2 * i + 7,
                 2 * i + 6))
        ])

    if theta > 1:
        der_node += "\n    and " + make_ders([
            ("x%d" % (2 * theta + 6), "(x^^%d)" % (2 * theta + 6)),
            ("x%d" % (2 * theta + 7),
             "(ki *. ((x^^%d) -. (x^^%d)) -. ki *. ((x^^%d) -. (x^^4)) -. bi *. (x^^%d)) *. ji" % \
                (2 * theta + 3,
                 2 * theta + 5,
                 2 * theta + 5,
                 2 * theta + 6))
    ])

    der_node += """ in

    of_list [%s]
    """ % ("; ".join(["x%d_der" % i for i in range(1, 2 * theta + 8)]))

    zls = "%s\n\n%s" % \
        (der_node, zls)

    zli = """val powertraind :
    float -S-> float -S-> float -S-> values
    -S->
    float * float * float -C-> float * values
    """

    return zls, zli

usage = """usage: gen_pwtrn THETA

    THETA: number of rotating masses
"""

if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description='Generate powertrain model')
    parser.add_argument('theta', metavar='THETA', type=int,
                        help='number of rotating masses')
    parser.add_argument('-o', '--output', dest='out', type=str,
                        default="powertrain",
                        help='name of output files (default: powertrain)')

    args = parser.parse_args()

    zls_c, zli_c = mainc(args)
    zls_d, zli_d = maind(args)

    zls = """(*
    Powertrain model adapted from:

    M. Althoff and B. H. Krogh. Avoiding geometric intersection operations
    in reachability analysis of hybrid systems.
    In Hybrid Systems: Computation and Control, HSCC'12, Beijing, China,
    April 17-19, 2012, pages 45-54, 2012.

    see powertrain.png
*)

open Zlarray
open Disc_solvers

type values = {
    %s
}
""" % ("\n    ".join(
    ["""x%-3d : float;""" % i for i in range(1, 2 * args.theta + 8)]
)) + \
"""
(*
    The set X0 of initial states is defined by
    X0 = { c + alpha * g | alpha in [-1, 1] }
    c = [ -0.0432,  -11,  0, 30,  0, 30, 360, -0.0013, 30, ..., -0.0013, 30]
    g = [  0.0056, 4.67,  0, 10,  0, 10, 120,  0.0006, 10, ...,  0.0006, 10]
*)
let initial_state alpha =
    let x8 = -0.0013 +. alpha *. 0.0006
    and x9 = 30. +. alpha *. 10. in
    {
        x1 = -0.0432 +. alpha *. 0.0056;
        x2 = -11. +. alpha *. 4.67;
        x3 = 0.0;
        x4 = x9;
        x5 = 0.0;
        x6 = x9;
        x7 = 12.0 *. x9;
        %s
    } """ % ("\n        ".join([
        """x%d = x8;
        x%d = x9;""" % (i, i + 1) for i in range(8, 2 * args.theta + 8, 2)
    ])) + \
"""
(* constants *)

let static theta = %3d (* number of rotating masses *)
let static n     = %3d (* number of dimensions (ie. state variables) *)

let static gamma   =     12.00 (* gearbox ratio *)
let static tau_eng =      0.10 (* time constant *)
let static bl      =      5.60 (* Nm.s/rad *)
let static bm      =      0.00 (* Nm.s/rad *)
let static bi      =      1.00 (* Nm.s/rad *)
let static ki      = 100000.00 (* Nm/rad *)
let static jl      =    140.00 (* kg.m^2 *)
let static jm      =      0.30 (* kg.m^2 *)
let static ji      =      0.01 (* kg.m^2 *)
let static kP      =      0.50 (* PID parameter P *)
let static kI      =      0.50 (* PID parameter I *)
let static kD      =      0.50 (* PID parameter D *)

%s

%s """ % (args.theta, 2 * args.theta + 7, zls_c, zls_d)

    zli = """
type initials

val theta   : int
val n       : int
val gamma   : float
val tau_eng : float
val bl      : float
val bm      : float
val bi      : float
val ki      : float
val jl      : float
val jm      : float
val ji      : float
val kP      : float
val kI      : float
val kD      : float
%s
%s """ % (zli_c, zli_d)

    prefix = args.out[-4:] if args.out.endswith(".zls") or args.out.endswith(".zls") else args.out
    zlsout = prefix + ".zls"
    zliout = prefix + ".zli"

    with open(zlsout, 'w+') as f:
        f.write(zls)
    with open(zliout, 'w+') as f:
        f.write(zli)
