(*
    Specification taken from ARCH-COMP2018 paper :

    G. Frehse (ed.), ARCH18 (EPiC Series in Computing, vol. 54), pp. 23–52
*)

(* Description taken from the paper:
    We analyze an extreme maneuver from an assumed maximum negative
    acceleration that lasts for 0.2 [s], followed by a maximum positive
    acceleration that lasts for 1.8 [s]. The initial states of the model are
    on a line segment in the n-dimensional space. We create different difficulty
    levels of the reachability problem by scaling down the initial states
    by some percentage. The model has the following non-formal specification:
    after the change of direction of acceleration, the powertrain completely
    passes the dead zone before being able to transmit torque again.
    Due to oscillations in the torque transmission, the powertrain should
    not re-enter the dead zone of the backlash.
*)

(*
    Spec:
        • z1 : left contact zone
        • z2 : dead zone
        • z3 : right contact zone

    For all instances, the common specification is:
            for all t ∈ [0, 2], x(0) ∈ X0 , (z2 U z3) ⇒ □(z3)

    The instances only differ in the size of the system and the initial set

    DTN01 :
        θ = 2, X0 := 0.05(X0 − center(X0)) + center(X0)
    DTN02 :
        θ = 2, X0 := 0.3(X0 − center(X0)) + center(X0)
    DTN03 :
        θ = 2, no change of X0
    DTN04 :
        θ = 22, X0 := 0.05(X0 − center(X0)) + center(X0)
    DTN05 :
        θ = 22, X0 := 0.3(X0 − center(X0)) + center(X0)
    DTN06 :
        θ = 22, no change of X0

    center(·) returns the volumetric center of a set
    X0 is the initial set defined in powertrain.zls (run `make powertrain.zls`)
*)

let static alpha = 0.03
let static ks    = 10000.

open Obs

(*
    Spec:
    After the change of direction of acceleration, the powertrain completely
    passes the dead zone before being able to transmit torque again.
    Due to oscillations in the torque transmission, the powertrain should not
    re-enter the dead zone of the backlash.

    `After the change of direction of acceleration ...`, ie after t = 0.2 as
    defined by the scenario
        phi  = □(edge(t > 2) ⇒ phi1)
    `... the powertrain completely passes the dead zone ...`, ie it enters the
    deadzone and when it leaves with x1 > alpha
        phi1 = ◇(z2) ∧ □(z2 ⇒ (◇(z3) ∧ phi2))
    `... the powertrain should not re-enter the dead zone`, ie when we reach
    z3, we never come back to z2
        phi2 = □(z3 ⇒ □(¬z2))

    Final formula:
        □(edge(t > 2) ⇒ (◇(z2) ∧ □(z2 ⇒ (◇(z3) ∧ (□(z3 ⇒ □(¬z2)))))))
*)

let static phi_desc = "□(edge(t > 2) ⇒ (◇(z2) ∧ □(z2 ⇒ (◇(z3) ∧ (□(z3 ⇒ □(¬z2)))))))"

node spec(t, x1) =
    let tstep = t -> (t -. pre t) in
    let z1 = p_lt(x1, -.alpha) in
    let z2 = p_and (p_lt(x1, alpha), p_gt(x1, -.alpha)) in
    let z3 = p_gt(x1, alpha) in
    d_trigger
        (d_and d_next_ub
               (d_trigger
                   (d_and d_next_ub
                          (d_trigger d_always))))
        (tstep, (p_edge(p_gt(t, 0.2)), (z2, (z2, (z3, (z3, p_not z2))))))

open Spec_models

(*  *)

hybrid inputc t =
    automaton
        | S1 -> do -5. unless up(t -. 0.2) then S2
        | S2 -> do  5. done

hybrid is_lt (x, y) =
    present | up(y -. x) | (disc(x)) on (x < y) | (disc(y)) on (x < y) -> ()
hybrid is_le (x, y) =
    present | up(y -. x) | (disc(x)) on (x <= y) | (disc(y)) on (x <= y) -> ()
hybrid is_gt (x, y) =
    present | up(x -. y) | (disc(x)) on (x > y) | (disc(y)) on (x > y) -> ()
hybrid is_ge (x, y) =
    present | up(x -. y) | (disc(x)) on (x >= y) | (disc(y)) on (x >= y) -> ()

type loc = NoLoc | Loc1 | Loc2 | Loc3

node loc_d x1 =
    if x1 >= alpha then Loc1
    else if x1 <= -. alpha then Loc3
    else Loc2

hybrid loc_c x1 =
    present
    | (is_ge(x1, alpha))() -> Loc1
    | (is_lt(x1, alpha))() on (x1 > -. alpha)
    | (is_gt(x1, -. alpha))() on (x1 < alpha) -> Loc2
    | (is_lt(x1, alpha))() on (x1 <= -. alpha)
    | (is_gt(x1, -. alpha))() on (x1 >= alpha) -> Loc3

(* instances *)

hybrid get_params x1 = ks', alpha' where
    rec loc = loc_c x1
    and init ks' = ks and init alpha' = -.alpha
    and present
        | loc(Loc2) -> do next ks' = 0. done
        | loc(_) -> do next ks' = ks done
    and present
        | loc(Loc3) -> do next alpha' = -.alpha done
        | loc(_) -> do next alpha' = alpha done

hybrid model_2 size_factor alpha = initials, input, x where
    rec der t = 1. init 0.
    and initials = initial_state_2 (size_factor *. alpha)
    and ks', alpha' = get_params x.v2_x1
    and input = inputc t
    and x = powertrainc_2 (initials, ks', alpha', input)

hybrid model_22 size_factor alpha = initials, input, x where
    rec der t = 1. init 0.
    and initials = initial_state_22 (size_factor *. alpha)
    and ks', alpha' = get_params x.v22_x1
    and input = inputc t
    and x = powertrainc_22 (initials, ks', alpha', input)

hybrid dtn01 alpha = model_2 0.05 alpha
hybrid dtn02 alpha = model_2 0.3 alpha
hybrid dtn03 alpha = model_2 1.0 alpha
hybrid dtn04 alpha = model_22 0.05 alpha
hybrid dtn05 alpha = model_22 0.3 alpha
hybrid dtn06 alpha = model_22 1.0 alpha

(* main *)

let static tstep = 0.005

open Scope

node plot(t, u, x1, (r, s)) =
    let rec alternating_alpha = alpha fby -. alpha fby alternating_alpha in
    let s1 = scope(-5., 5., ("u", linear, u)) in
    let s2 = scope2(-0.2, 0.2, ("x1", linear, x1),
                                 ("alpha and -alpha", points false, alternating_alpha)) in
    let s3 = scope2(-0.2, 0.2, (phi_desc, linear, r), ("done?", linear, Obs.float_of_state s)) in
    window3("Powertrain : x = time", 2.5, t, s1, s2, s3)

hybrid main () =
    let der t = 1. init 0. in
    let initials, input, x = dtn01 0. in

    let init tmp = print_endline ("Initial values:" ^
        "\n  x1 = " ^ (Basics.stdform_of_float 2 2 x.v2_x1) ^
        "\n  x2 = " ^ (Basics.stdform_of_float 2 2 x.v2_x2) ^
        "\n  x7 = " ^ (Basics.stdform_of_float 2 2 x.v2_x7) ^
        "\n  x8 = " ^ (Basics.stdform_of_float 2 2 x.v2_x8) ^
        "\n  x9 = " ^ (Basics.stdform_of_float 2 2 x.v2_x9)
    ) in

    present (period(tstep)) ->
        let phi = spec(t, x.v2_x1) in
        plot (t, input, x.v2_x1, phi)
    else ()
