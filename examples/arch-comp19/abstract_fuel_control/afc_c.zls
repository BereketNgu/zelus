open Afc_utils

node integrate (tstep, dy, y0) = y where
    rec y = y0 fby (tstep *. dy +. y)

let saturate (low, high, v) = min (max v low) high

hybrid step (y0, t0, y1) =
    let rec der t = 1. init 0. in
    present up(t -. t0) -> y1 init y0

hybrid pulse_gen (a, p, w, delay) = y where
    rec reset do
        der t = 1. init 0.
        and pulse_is_on =
            present
            | up(t -. delay) -> true
            | up(t -. delay -. p *. w) -> false
            init false
        and y = if pulse_is_on then a else 0.
    done every (up(t -. p))

hybrid over_under_shoot (abf, abf_ref) = e where
    rec e = (abf /. abf_ref) -. 1.

hybrid rms_error (abf, abf_ref) = e where
    rec der e' = (abf -. abf_ref) ** 2. *. (step (0.,10.,1.)) init 0.
    and e = sqrt (e' /. (simTime -. 10.))

hybrid calculate_error (abf, spec_num, abf_ref) = s_out where
    rec s_out =
        match spec_num with
        | 1 -> over_under_shoot (abf, abf_ref)
        | 2 -> rms_error (abf, abf_ref)
        | _ -> 0. (* should not happen *)

hybrid vv_stub (abf, abf_ref) = s_out where
    rec der t = 1. init 0.
    and compute = present up (t -. 1.) -> true init false
    and s_out = if compute then calculate_error (abf, spec_num, abf_ref) else 0.

hybrid throttle (throttle_angle, manifold_pressure, atmospheric_pressure) =
        throttle_flow where
    rec throttle_flow = f_angle *. aux *. flow_direction
    and f_angle = 2.821 -. 0.05231 *. throttle_angle
                        +. 0.10299 *. throttle_angle *. throttle_angle
                        -. 0.00063 *. throttle_angle *. throttle_angle *. throttle_angle
    and aux = if pratio_b then g_pratio else sonic_flow
    and pratio_b =
        present
        | up(pratio -. 0.5) -> true
        | up(0.5 -. pratio) -> false
        init (pratio >= 0.5)
    and g_pratio = 2. *. (sqrt (pratio -. pratio *. pratio))
    and sonic_flow = 1.
    and pratio = min (manifold_pressure /. atmospheric_pressure)
                     (atmospheric_pressure /. manifold_pressure)
    and flow_direction =
        present
        | up(atmospheric_pressure -. manifold_pressure) -> 1.
        | up(manifold_pressure -. atmospheric_pressure) -> -1.
        init if (atmospheric_pressure -. manifold_pressure) > 0. then 1.
             else if (atmospheric_pressure -. manifold_pressure) < 0. then -1.
             else 0.

hybrid intake_manifold (throttle_flow, omega) =
        cyl_air, manifold_pressure where
    rec cyl_air = pumping *. 0.9
    and pumping =
        -0.366 +. 0.08979 *. manifold_pressure *. omega
               -. 0.0337  *. omega *. manifold_pressure *. manifold_pressure
               +. 0.0001  *. manifold_pressure *. omega *. omega
    and der manifold_pressure = (throttle_flow -. cyl_air) *. 0.41328 init 0.982

hybrid af_sensor x = y *. af_sensor_tol where
    rec der y = (x -. y) *. 50. init 14.7

hybrid cylinder_exhaust (cyl_air, cyl_fuel, omega, sensor_fault) =
        abf_meas, cyl_air_charge, abf where
    rec der t = 1. init 0.
    and abf_meas =
        present
        | sensor_fault(true) -> -1.
        | sensor_fault(false) -> abf
        init abf
    and cyl_air_charge = cyl_air /. omega *. pi
    and abf = af_sensor filter_out
    and der filter_out = (delayed -. filter_out) *. 10. init 14.7
    and delayed = fuel_transport_delay_c
                        (t, cyl_air /. cyl_fuel,
                         lookup_delay (omega *. rad2rpm, cyl_air_charge))

hybrid wall_wetting (fuel_injected, omega, cyl_air_charge) = cyl_fuel where
    rec cyl_fuel = fuel_vapor +. fuel_puddle_evap
    and fuel_vapor = kappa_tolerance *. fuel_injected
    and kappa_tolerance = lookup_kappa (omega *. rad2rpm, cyl_air_charge)
    and fuel_puddle_evap = aux /. tau_ww_tolerance
    and der aux = fuel_injected *. (1. -. kappa_tolerance) -. fuel_puddle_evap
        init 0.0112
    and tau_ww_tolerance = lookup_tau_ww (omega, cyl_air_charge) *. 1.

hybrid fup x = up(x -. 0.5)

node sensor_failure_detection abf = fail_on where
    rec fail_on = (abf <= -1.) || (false fby fail_on)

node normal_mode_detection () = normal_mode where
    rec samp_time = 0.01 (* 10 ms *)
    and normal_mode_start_time = 10.
    and t = 0. fby (t +. samp_time)
    and normal_mode = (t >= normal_mode_start_time) || (false fby normal_mode)

node power_mode_detection throttle_angle = power_on where
    rec power_on = (throttle_angle >= thresh) || (false fby power_on)
    and thresh = if (false fby power_on) then 50. else 70.

node feedforward_controller (estimated_cyl_air_flow, abf_ref) =
        desired_fuel_mass where
    rec desired_fuel_mass = estimated_cyl_air_flow /. abf_ref

node air_estimation (throttle_flow, engine_speed) = estimated_cyl_air_flow where
    rec estimated_cyl_air_flow =
        -0.366 +. engine_speed *. aux *. 0.08979
               -. 0.0337 *. aux *. aux *. engine_speed
               +. 0.0001 *. engine_speed *. engine_speed *. aux
    and aux = 0.982 fby aux'
    and aux' = aux +.
        0.01 *. 0.41328 *. (throttle_flow -. estimated_cyl_air_flow)

node feedback_PI_controller (abf_ref, abf_meas) = closed_loop_fuel_trim where
    rec closed_loop_fuel_trim = 0.04 *. (abf_meas -. abf_ref) +. aux
    and aux = 0. -> (pre aux +. 0.01 *. 0.14 *. (abf_meas -. abf_ref))

hybrid af_controller (engine_speed, throttle_angle, throttle_flow, abf_meas) =
        commanded_fuel, mode, abf_ref where
    rec der t = 1. init 0.
    and init commanded_fuel = 0.1726
    and init mode = 0.
    and init abf_ref = 0.
    and present
        | up(t -. 0.001) -> do
                commanded_fuel = 0.1726
            and mode = 1.
            and abf_ref = 14.7
        done
        | (period (0.01 | 0.01)) ->
        local desired_fuel_mass, estimated_cyl_air_flow, fb_fuel_sat, fb_fuel,
              fail_on, normal_mode, power_on
        do
                commanded_fuel =
                    saturate (0.13, 1.66, desired_fuel_mass *. fb_fuel_sat)
            and desired_fuel_mass =
                feedforward_controller (estimated_cyl_air_flow, abf_ref)
            and estimated_cyl_air_flow =
                air_estimation (throttle_flow, engine_speed)
            and fb_fuel_sat = saturate (0., infinity, fb_fuel)
            and fb_fuel = if mode > 0.5 then 1. else
                feedback_PI_controller (abf_ref, abf_meas) +. 1.
            and fail_on = sensor_failure_detection abf_meas
            and normal_mode = normal_mode_detection ()
            and power_on = power_mode_detection throttle_angle
            and mode =
                if fail_on || not normal_mode || power_on then 1.
                else 0.
            and abf_ref =
                if normal_mode && power_on then 12.5 (* abf ref power*)
                else 14.7 (* abf ref *)
        done

hybrid model_1_transfer_fn (x) = y where
    rec der y = 10. *. (x -. y) init 0.

hybrid model_1 (throttle_in, engine_speed) = abf, abf_ref, mode where
    rec der t = 1. init 0.
    and throttle_flow = throttle (throttle_angle, manifold_pressure, 1.)
    and throttle_angle = saturate (0., 90., throttle_delay +. 8.8)
    and throttle_delay = model_1_transfer_fn (throttle_in)
    and cyl_air, manifold_pressure = intake_manifold (throttle_flow, omega)
    and omega = saturate (900., 1100., engine_speed) *. rpm2rad
    and abf_meas, cyl_air_charge, abf =
        cylinder_exhaust (cyl_air, cyl_fuel, omega, af_sensor)
    and cyl_fuel = wall_wetting (fuel_injected, omega, cyl_air_charge)
    and af_sensor = present (up (t -. fault_time)) -> true
    and fuel_injected = commanded_fuel *. fuel_inj_tol
    and commanded_fuel, mode, abf_ref =
        af_controller (omega, throttle_angle,
                       throttle_flow *. maf_sensor_tol,
                       abf_meas *. af_sensor_tol)

hybrid afc (throttle, engine) = abf, abf_ref, mu, mode where
    rec mu = vv_stub (abf, abf_ref)
    and abf, abf_ref, mode = model_1 (throttle, engine)

open Scope
let static tstep = 0.01

hybrid main () =
    let der t = 1. init 0. in

    let throttle = 80. in
    let engine = 1100. in

    let abf, abf_ref, mu, mode = afc (throttle, engine) in

    present (period(tstep)) ->
        let s1 = scope (0., 85., ("throttle", linear, throttle)) in
        let s2 = scope (900., 1100., ("engine", linear, engine)) in
        let s3 = scope2(0., 15., ("abf", linear, abf), ("abf_ref", linear, abf_ref)) in
        let s4 = scope (-0.1, 0.1, ("mu", linear, mu)) in
        let s5 = scope (0., 2., ("mode", linear, mode)) in

        windown("Abstract fuel control", 50., t,  [s1; s2; s3; s4; s5])
    else ()
