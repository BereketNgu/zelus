let static ro = 2.377e-3

open Matrix
let thrust_a =
    let mat = create 6 6 0. in
    set_row_from_list mat 0 [  1060.;   670.;   880.; 1140.; 1500.; 1860. ];
    set_row_from_list mat 1 [   635.;   425.;   690.; 1010.; 1330.; 1700. ];
    set_row_from_list mat 2 [    60.;    25.;   345.;  755.; 1130.; 1525. ];
    set_row_from_list mat 3 [ -1020.;  -170.;  -300.;  350.;  910.; 1360. ];
    set_row_from_list mat 4 [ -2700.; -1900.; -1300.; -247.;  600.; 1100. ];
    set_row_from_list mat 5 [ -3600.; -1400.;  -595.; -342.; -200.;  700. ];
    mat

let thrust_b =
    let mat = create 6 6 0. in
    set_row_from_list mat 0 [ 12680.;  9150.; 6200.; 3950.; 2450.; 1400. ];
    set_row_from_list mat 1 [ 12680.;  9150.; 6313.; 4040.; 2470.; 1400. ];
    set_row_from_list mat 2 [ 12610.;  9312.; 6610.; 4290.; 2600.; 1560. ];
    set_row_from_list mat 3 [ 12640.;  9839.; 7090.; 4660.; 2840.; 1660. ];
    set_row_from_list mat 4 [ 12390.; 10176.; 7750.; 5320.; 3250.; 1930. ];
    set_row_from_list mat 5 [ 11680.;  9848.; 8050.; 6100.; 3800.; 2310. ];
    mat

let thrust_c =
    let mat = create 6 6 0. in
    set_row_from_list mat 0 [ 20000.; 15000.; 10800.;  7000.; 4000.; 2500. ];
    set_row_from_list mat 1 [ 21420.; 15700.; 11225.;  7323.; 4435.; 2600. ];
    set_row_from_list mat 2 [ 22700.; 16860.; 12250.;  8154.; 5000.; 2835. ];
    set_row_from_list mat 3 [ 24240.; 18910.; 13760.;  9285.; 5700.; 3215. ];
    set_row_from_list mat 4 [ 26070.; 21075.; 15975.; 11115.; 6860.; 3950. ];
    set_row_from_list mat 5 [ 28886.; 23319.; 18300.; 13484.; 8642.; 5057. ];
    mat

let dampp_a =
    let mat = create 9 12 0. in
    set_row_from_list mat 0 [ -0.267; -0.110;  0.308;   1.34;   2.08;   2.91;   2.76;   2.05;   1.50;   1.49;   1.83;   1.21 ];
    set_row_from_list mat 1 [  0.882;  0.852;  0.876;  0.958;  0.962;  0.974;  0.819;  0.483;  0.590;   1.21; -0.493;  -1.04 ];
    set_row_from_list mat 2 [ -0.108; -0.108; -0.188;  0.110;  0.258;  0.226;  0.344;  0.362;  0.611;  0.529;  0.298;  -2.27 ];
    set_row_from_list mat 3 [  -8.80;  -25.8;  -28.9;  -31.4;  -31.2;  -30.7;  -27.7;  -28.2;  -29.0;  -29.8;  -38.3;  -35.3 ];
    set_row_from_list mat 4 [ -0.126; -0.026;  0.063;  0.113;  0.208;  0.230;  0.319;  0.437;  0.680;  0.100;  0.447; -0.330 ];
    set_row_from_list mat 5 [ -0.360; -0.359; -0.443; -0.420; -0.383; -0.375; -0.329; -0.294; -0.230; -0.210; -0.120; -0.100 ];
    set_row_from_list mat 6 [  -7.21; -0.540;  -5.23;  -5.26;  -6.11;  -6.64;  -5.69;  -6.00;  -6.20;  -6.40;  -6.60;  -6.00 ];
    set_row_from_list mat 7 [ -0.380; -0.363; -0.378; -0.386; -0.370; -0.453; -0.550; -0.582; -0.595; -0.637;  -1.02; -0.840 ];
    set_row_from_list mat 8 [  0.061;  0.052;  0.052; -0.012; -0.013; -0.024;  0.050;  0.150;  0.130;  0.158;  0.240;  0.150 ];
    mat

let saturate (x, low, high) = max (min x high) low

let hybrid hybrid_ge (x,y) =
    present | up(x -. y) -> true | up(y -. x) -> false init (x >= y)
let hybrid hybrid_gt (x,y) =
    present | up(x -. y) -> true | up(y -. x) -> false init (x > y)
let hybrid hybrid_le (x,y) =
    present | up(x -. y) -> false | up(y -. x) -> true init (x <= y)
let hybrid hybrid_lt (x,y) =
    present | up(x -. y) -> false | up(y -. x) -> true init (x < y)
let hybrid hybrid_sign x =
    if hybrid_ge (x, 0.) then 1. else -1.

let hybrid hybrid_abs_float x = (hybrid_sign x) *. x

let node round f =
    let i, frac = modf f in
    if frac >= 0.5 then i +. 1. else i

let hybrid hybrid_floor_ceil_truncate_round x =
    floor_x, ceil_x, truncate_x, round_x where
    rec init floor_x = floor x
    and init ceil_x = ceil x
    and init truncate_x = truncate x
    and init round_x = round x
    and present up(x -. ceil_x) | up (floor_x -. x) ->
        do floor_x = floor x and ceil_x = ceil x
        and truncate_x = truncate x and round_x = round x done

let hybrid hybrid_floor x = floor where
    floor, _, _, _ = hybrid_floor_ceil_truncate_round x
let hybrid hybrid_ceil x = ceil where
    _, ceil, _, _ = hybrid_floor_ceil_truncate_round x
let hybrid hybrid_truncate x = truncate where
    _, _, truncate, _ = hybrid_floor_ceil_truncate_round x
let hybrid hybrid_round x = round where
    _, _, _, round = hybrid_floor_ceil_truncate_round x

let hybrid adc(vt, alt) =
    (* converts velocity (vt) and altitude (alt) to mach number (amach)
       and dynamic pressure (qbar)
       See pages 63-65 of Stevens & Lewis, "Aircraft Control and Simulation",
       2nd edition *)

    (* vt = freestream air speed *)

    let tfac = 1. -. 0.703e-5 *. alt in
    let t =
        if hybrid_ge (alt, 35000.) then 390. (* in stratosphere *)
        else 519. *. tfac (* 3 rankine per atmosphere (3 rankine per 1000 ft) *)
    in

    (* rho = freestream mass density *)
    let rho = ro *. tfac ** 4.14 in

    (* a = speed of sound at the ambient conditions *)
    (* speed of sound in a fluid is the sqrt of the quotient of the modulus
       of elasticity over the mass density *)
    let a = sqrt (1.4 *. 1716.3 *. t) in

    (* amach = mach number *)
    vt /. a,
    (* qbar = dynamic pressure *)
    0.5 *. rho *. vt *. vt

let hybrid tgear(thtl) =
    if hybrid_le (thtl, 0.77)
    then 64.94 *. thtl
    else 217.38 *. thtl -. 117.38

let hybrid rtau(dp) =
    if hybrid_le (dp, 25.) then 1.
    else if hybrid_ge (dp, 50.) then 0.1
    else 1.9 -. 0.036 *. dp

let hybrid pdot(p3, p1) =
    (* power derivative *)
    let t, p2 =
        if hybrid_ge (p1, 50.) then
            if hybrid_ge (p3, 50.)
            then (5., p1)
            else (rtau (60. -. p3), 60.)
        else
            if hybrid_ge (p3, 50.)
            then (5., 40.)
            else (rtau (p1 -. p3), p1)
    in t *. (p2 -. p3)

let hybrid fix(ele) =
    (* round towards 0 *)
    if hybrid_gt (ele, 0.)
    then hybrid_floor(ele)
    else hybrid_ceil(ele)

let hybrid thrust(power, alt, rmach) =
    (* thrust lookup-table *)
    let alt = if hybrid_lt (alt, 0.) then 0.01 else alt in (* uh, why not 0? *)
    let h = 0.0001 *. alt in
    let i = fix h in
    let i = if hybrid_ge (i, 5.) then 4. else i in
    let dh = h -. i in
    let rm = 5. *. rmach in
    let m = fix rm in
    let m =
        if hybrid_ge (m, 5.) then 4.
        else if hybrid_le (m, 0.) then 0.
        else m
    in
    let dm = rm -. m in
    let cdh = 1. -. dh in

    let i = hybrid_truncate i and m = hybrid_truncate m in

    let s = (get thrust_b i m) *. cdh +. (get thrust_b (i+1) m) *. dh in
    let t = (get thrust_b i (m+1)) *. cdh +. (get thrust_b (i+1) (m+1)) *. dh in
    let tmil = s +. (t -. s) *. dm in

    let low_power = hybrid_lt (power, 50.) in

    let s =
        if low_power then
            (get thrust_a i m) *. cdh +. (get thrust_a (i+1) m) *. dh
        else
            (get thrust_c i m) *. cdh +. (get thrust_c (i+1) m) *. dh
    in
    let t =
        if low_power then
            (get thrust_a i (m+1)) *. cdh +. (get thrust_a (i+1) (m+1)) *. dh
        else
            (get thrust_c i (m+1)) *. cdh +. (get thrust_c (i+1) (m+1)) *. dh
    in
    let tidl = s +. (t -. s) *. dm in

    (* thrst *)
    if low_power then
        tidl +. (tmil -. tidl) *. power *. 0.02
    else
        tmil +. (tidl -. tmil) *. (power -. 50.) *. 0.02

let dampp_aux (da, k, l, i) =
    (get dampp_a (k-1) i) +.
    (abs_float da) *. ((get dampp_a (l-1) i) -. (get dampp_a (k-1) i))

let hybrid dampp(alpha) = d0, d1, d2, d3, d4, d5, d6, d7, d8 where
    (* alpha in degrees *)
    let s = 0.2 *. alpha in
    let k = fix s in
    let k =
        if hybrid_le (k, -2.) then -1.
        else if hybrid_ge (k, 9.) then 8.
        else k
    in
    let da = s -. k in
    let l = k +. fix (1.1 *. (hybrid_sign da)) in
    let k = hybrid_truncate (k +. 3.) in
    let l = hybrid_truncate (l +. 3.) in
    do
            d0 = dampp_aux (da, k, l, 0)
        and d1 = dampp_aux (da, k, l, 1)
        and d2 = dampp_aux (da, k, l, 2)
        and d3 = dampp_aux (da, k, l, 3)
        and d4 = dampp_aux (da, k, l, 4)
        and d5 = dampp_aux (da, k, l, 5)
        and d6 = dampp_aux (da, k, l, 6)
        and d7 = dampp_aux (da, k, l, 7)
        and d8 = dampp_aux (da, k, l, 8)
    done


let morellif16(alpha, beta, de, da, dr, p, q, r, cbar, b, v, xcg, xcgref) =
    cx, cy, cz, cl, cm, cn where rec

    (* bounds alpha between -10 deg and 45 deg *)
    (* let alpha=max (-10. *. pi /. 180.) (min (45. *. pi /. 180.) alpha) in *)
    (* bounds beta between -30 deg and 30 deg *)
    (* let beta = max (-30. *. pi /. 180.) (min (30. *. pi /. 180.) beta) in *)
    (* bounds elevator deflection between -25 deg and 25 deg *)
    (* let de = max (-25. *. pi /. 180.) (min(25. *. pi /. 180.) de) in *)
    (* bounds aileron deflection between -21.5 deg and 21.5 deg *)
    (* let da = max (-21.5 *. pi /. 180.) (min (21.5 *. pi /. 180.) da) in *)
    (* bounds rudder deflection between -30 deg and 30 deg *)
    (* let dr = max (-30. *. pi /. 180.) (min (30. *. pi /. 180.) dr) in *)

    (* reference longitudinal cg position in Morelli f16 model *)
    (* let xcgref = 0.35 in *)

    let phat = p *. b /. (2. *. v)
    and qhat = q *. cbar /. (2. *. v)
    and rhat = r *. b /. (2. *. v)

    and a0 = -1.943367e-2 and a1 = 2.136104e-1 and a2 = -2.903457e-1
    and a3 = -3.348641e-3 and a4 = -2.060504e-1 and a5 = 6.988016e-1
    and a6 = -9.035381e-1

    and b0 = 4.833383e-1 and b1 = 8.644627 and b2 = 1.131098e1
    and b3 = -7.422961e1 and b4 = 6.075776e1

    and c0 = -1.145916 and c1 = 6.016057e-2 and c2 = 1.642479e-1

    and d0 = -1.006733e-1 and d1 = 8.679799e-1
    and d2 = 4.260586 and d3 = -6.923267

    and e0 = 8.071648e-1 and e1 = 1.189633e-1
    and e2 = 4.177702 and e3 = -9.162236

    and f0 = -1.378278e-1 and f1 = -4.211369 and f2 = 4.775187
    and f3 = -1.026225e1 and f4 = 8.399763 and f5 = -4.354000e-1

    and g0 = -3.054956e1 and g1 = -4.132305e1 and g2 = 3.292788e2
    and g3 = -6.848038e2 and g4 = 4.080244e2

    and h0 = -1.05853e-1 and h1 = -5.776677e-1 and h2 = -1.672435e-2
    and h3 = 1.357256e-1 and h4 = 2.172952e-1 and h5 = 3.464156
    and h6 = -2.835451 and h7 = -1.098104

    and i0 = -4.126806e-1 and i1 = -1.189974e-1
    and i2 = 1.247721 and i3 = -7.391132e-1

    and j0 = 6.250437e-2 and j1 = 6.067723e-1 and j2 = -1.101964
    and j3 = 9.100087 and j4 = -1.192672e1

    and k0 = -1.463144e-1 and k1 = -4.07391e-2 and k2 = 3.253159e-2
    and k3 = 4.851209e-1 and k4 = 2.978850e-1 and k5 = -3.746393e-1
    and k6 = -3.213068e-1

    and l0 = 2.635729e-2 and l1 = -2.192910e-2 and l2 = -3.152901e-3
    and l3 = -5.817803e-2 and l4 = 4.516159e-1 and l5 = -4.928702e-1
    and l6 = -1.579864e-2

    and m0 = -2.029370e-2 and m1 = 4.660702e-2 and m2 = -6.012308e-1
    and m3 = -8.062977e-2 and m4 = 8.320429e-2 and m5 = 5.018538e-1
    and m6 = 6.378864e-1 and m7 = 4.226356e-1

    and n0 = -5.19153 and n1 = -3.554716 and n2 = -3.598636e1
    and n3 = 2.247355e2 and n4 = -4.120991e2 and n5 = 2.411750e2

    and o0 = 2.993363e-1 and o1 = 6.594004e-2 and o2 = -2.003125e-1
    and o3 = -6.233977e-2 and o4 = -2.107885 and o5 = 2.141420
    and o6 = 8.476901e-1

    and p0 = 2.677652e-2 and p1 = -3.298246e-1 and p2 = 1.926178e-1
    and p3 = 4.013325 and p4 = -4.404302

    and q0 = -3.698756e-1 and q1 = -1.167551e-1 and q2 = -7.641297e-1

    and r0 = -3.348717e-2 and r1 = 4.276655e-2 and r2 = 6.573646e-3
    and r3 = 3.535831e-1 and r4 = -1.373308 and r5 = 1.237582
    and r6 = 2.302543e-1 and r7 = -2.512876e-1 and r8 = 1.588105e-1
    and r9 = -5.199526e-1

    and s0 = -8.115894e-2 and s1 = -1.156580e-2 and s2 = 2.514167e-2
    and s3 = 2.038748e-1 and s4 = -3.337476e-1 and s5 = 1.004297e-1
    in

    let cx0 = a0 +. a1 *. alpha +. a2 *. de**2. +. a3 *. de +.
              a4 *. alpha *. de +. a5 *. alpha**2. +. a6 *. alpha**3.
    and cxq = b0 +. b1 *. alpha +. b2 *. alpha**2. +. b3 *. alpha**3. +.
              b4 *. alpha**4.
    and cy0 = c0 *. beta +. c1 *. da +. c2 *. dr
    and cyp = d0 +. d1 *. alpha +. d2 *. alpha**2. +. d3 *. alpha**3.
    and cyr = e0 +. e1 *. alpha +. e2 *. alpha**2. +. e3 *. alpha**3.
    and cz0 = (f0 +. f1 *. alpha +. f2 *. alpha**2. +. f3 *. alpha**3. +.
              f4 *. alpha**4.) *. (1. -. beta**2.) +. f5 *. de
    and czq = g0 +. g1 *. alpha +. g2 *. alpha**2. +. g3 *. alpha**3. +.
              g4 *. alpha**4.
    and cl0 = h0 *. beta +. h1 *. alpha *. beta +. h2 *. alpha**2. *. beta +.
              h3 *. beta**2. +. h4 *. alpha *. beta**2. +.
              h5 *. alpha**3. *. beta +.
              h6 *. alpha**4. *. beta +. h7 *. alpha**2. *. beta**2.
    and clp = i0 +. i1 *. alpha +. i2 *. alpha**2. +. i3 *. alpha**3.
    and clr = j0 +. j1 *. alpha +. j2 *. alpha**2. +. j3 *. alpha**3. +.
              j4 *. alpha**4.
    and clda = k0 +. k1 *. alpha +. k2 *. beta +. k3 *. alpha**2. +.
               k4 *. alpha *. beta +. k5 *. alpha**2. *. beta +. k6 *. alpha**3.
    and cldr = l0 +. l1 *. alpha +. l2 *. beta +. l3 *. alpha *. beta +.
               l4 *. alpha**2. *. beta +. l5 *. alpha**3. *. beta +.
               l6 *. beta**2.
    and cm0 = m0 +. m1 *. alpha +. m2 *. de +. m3 *. alpha *. de +.
              m4 *. de**2. +. m5 *. alpha**2. *. de +. m6 *. de**3. +.
              m7 *. alpha *. de**2.
    in

    let cmq = n0 +. n1 *. alpha +. n2 *. alpha**2. +. n3 *. alpha**3. +.
              n4 *. alpha**4. +. n5 *. alpha**5.
    and cn0 = o0 *. beta +. o1 *. alpha *. beta +. o2 *. beta**2. +.
              o3 *. alpha *. beta**2. +. o4 *. alpha**2. *. beta +.
              o5 *. alpha**2. *. beta**2. +. o6 *. alpha**3. *. beta
    and cnp = p0 +. p1 *. alpha +. p2 *. alpha**2. +. p3 *. alpha**3. +.
              p4 *. alpha**4.
    and cnr = q0 +. q1 *. alpha +. q2 *. alpha**2.
    and cnda = r0 +. r1 *. alpha +. r2 *. beta +. r3 *. alpha *. beta +.
               r4 *. alpha**2. *. beta +. r5 *. alpha**3. *. beta +.
               r6 *. alpha**2. +. r7 *. alpha**3. +. r8 *. beta**3. +.
               r9 *. alpha *. beta**3.
    and cndr = s0 +. s1 *. alpha +. s2 *. beta +. s3 *. alpha *. beta +.
               s4 *. alpha**2. *. beta +. s5 *. alpha**2.
    in do

        cx = cx0 +. cxq *. qhat
    and cy = cy0 +. cyp *. phat +. cyr *. rhat
    and cz = cz0 +. czq *. qhat
    and cl = cl0 +. clp *. phat +. clr *. rhat +. clda *. da +. cldr *. dr
    and cm = cm0 +. cmq *. qhat +. cz *. (xcgref -. xcg)
    and cn = cn0 +. cnp *. phat +. cnr *. rhat +. cnda *. da +. cndr *. dr -.
             cy *. (xcgref -. xcg) *. (cbar /. b)
    done
