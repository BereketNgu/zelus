let static ro = 2.377e-3

open Matrix
let thrust_a =
    let mat = create 6 6 0. in
    set_row_from_list mat 0 [  1060.;  635.;   60.; -1020.; -2700.; -3600. ];
    set_row_from_list mat 1 [   670.;  425.;   25.;  -170.; -1900.; -1400. ];
    set_row_from_list mat 2 [   880.;  690.;  345.;  -300.; -1300.;  -595. ];
    set_row_from_list mat 3 [  1140.; 1010.;  755.;   350.;  -247.;  -342. ];
    set_row_from_list mat 4 [  1500.; 1330.; 1130.;   910.;   600.;  -200. ];
    set_row_from_list mat 5 [  1860.; 1700.; 1525.;  1360.;  1100.;   700. ];
    mat

let thrust_b =
    let mat = create 6 6 0. in
    set_row_from_list mat 0 [ 12680.; 12680.; 12610.; 12640.; 12390.; 11680. ];
    set_row_from_list mat 1 [  9150.;  9150.;  9312.;  9839.; 10176.;  9848. ];
    set_row_from_list mat 2 [  6200.;  6313.;  6610.;  7090.;  7750.;  8050. ];
    set_row_from_list mat 3 [  3950.;  4040.;  4290.;  4660.;  5320.;  6100. ];
    set_row_from_list mat 4 [  2450.;  2470.;  2600.;  2840.;  3250.;  3800. ];
    set_row_from_list mat 5 [  1400.;  1400.;  1560.;  1660.;  1930.;  2310. ];
    mat

let thrust_c =
    let mat = create 6 6 0. in
    set_row_from_list mat 0 [ 20000.; 21420.; 22700.; 24240.; 26070.; 28886. ];
    set_row_from_list mat 1 [ 15000.; 15700.; 16860.; 18910.; 21075.; 23319. ];
    set_row_from_list mat 2 [ 10800.; 11225.; 12250.; 13760.; 15975.; 18300. ];
    set_row_from_list mat 3 [  7000.;  7323.;  8154.;  9285.; 11115.; 13484. ];
    set_row_from_list mat 4 [  4000.;  4435.;  5000.;  5700.;  6860.;  8642. ];
    set_row_from_list mat 5 [  2500.;  2600.;  2835.;  3215.;  3950.;  5057. ];
    mat

let dampp_a =
    let mat = create 12 9 0. in
    set_row_from_list mat 0 [ -0.267;  0.882; -0.108; -8.80; -0.126; -0.360;  -7.21; -0.380;  0.061 ];
    set_row_from_list mat 1 [ -0.110;  0.852; -0.108; -25.8; -0.026; -0.359; -0.540; -0.363;  0.052 ];
    set_row_from_list mat 2 [  0.308;  0.876; -0.188; -28.9;  0.063; -0.443;  -5.23; -0.378;  0.052 ];
    set_row_from_list mat 3 [   1.34;  0.958;  0.110; -31.4;  0.113; -0.420;  -5.26; -0.386; -0.012 ];
    set_row_from_list mat 4 [   2.08;  0.962;  0.258; -31.2;  0.208; -0.383;  -6.11; -0.370; -0.013 ];
    set_row_from_list mat 5 [   2.91;  0.974;  0.226; -30.7;  0.230; -0.375;  -6.64; -0.453; -0.024 ];
    set_row_from_list mat 6 [   2.76;  0.819;  0.344; -27.7;  0.319; -0.329;  -5.69; -0.550;  0.050 ];
    set_row_from_list mat 7 [   2.05;  0.483;  0.362; -28.2;  0.437; -0.294;  -6.00; -0.582;  0.150 ];
    set_row_from_list mat 8 [   1.50;  0.590;  0.611; -29.0;  0.680; -0.230;  -6.20; -0.595;  0.130 ];
    set_row_from_list mat 9 [   1.49;   1.21;  0.529; -29.8;  0.100; -0.210;  -6.40; -0.637;  0.158 ];
    set_row_from_list mat 10 [  1.83; -0.493;  0.298; -38.3;  0.447; -0.120;  -6.60;  -1.02;  0.240 ];
    set_row_from_list mat 11 [  1.21;  -1.04;  -2.27; -35.3; -0.330; -0.100;  -6.00; -0.840;  0.150 ];
    mat

let saturate (x, low, high) = max (min x high) low

(* let hybrid hybrid_ge (x,y) =
    present | up(x -. y) -> true | up(y -. x) -> false init (x >= y)
let hybrid hybrid_gt (x,y) =
    present | up(x -. y) -> true | up(y -. x) -> false init (x > y)
let hybrid hybrid_le (x,y) =
    present | up(x -. y) -> false | up(y -. x) -> true init (x <= y)
let hybrid hybrid_lt (x,y) =
    present | up(x -. y) -> false | up(y -. x) -> true init (x < y) *)

let hybrid hybrid_ge(x,y) = present(period(0.1)) -> x >= y init x >= y
let hybrid hybrid_gt(x,y) = present(period(0.1)) -> x > y init x > y
let hybrid hybrid_le(x,y) = present(period(0.1)) -> x <= y init x <= y
let hybrid hybrid_lt(x,y) = present(period(0.1)) -> x < y init x < y

let hybrid hybrid_sign x = if hybrid_ge (x, 0.) then 1. else -1.
let hybrid hybrid_abs_float x = (hybrid_sign x) *. x

let hybrid adc(vt, alt) =
    (* converts velocity (vt) and altitude (alt) to mach number (amach)
       and dynamic pressure (qbar)
       See pages 63-65 of Stevens & Lewis, "Aircraft Control and Simulation",
       2nd edition *)

    (* vt = freestream air speed *)

    let tfac = 1. -. 0.703e-5 *. alt in
    let t =
        if hybrid_ge (alt, 35000.) then 390. (* in stratosphere *)
        else 519. *. tfac (* 3 rankine per atmosphere (3 rankine per 1000 ft) *)
    in

    (* rho = freestream mass density *)
    let rho = ro *. tfac ** 4.14 in

    (* a = speed of sound at the ambient conditions *)
    (* speed of sound in a fluid is the sqrt of the quotient of the modulus
       of elasticity over the mass density *)
    let a = sqrt (1.4 *. 1716.3 *. t) in

    (* amach = mach number *)
    vt /. a,
    (* qbar = dynamic pressure *)
    0.5 *. rho *. vt *. vt

let hybrid tgear(thtl) =
    if hybrid_le (thtl, 0.77)
    then 64.94 *. thtl
    else 217.38 *. thtl -. 117.38

let discrete rtau(dp) =
    if dp <= 25. then 1.
    else if dp >= 50. then 0.1
    else 1.9 -. 0.036 *. dp

let discrete pdot_disc(p3, p1) =
    let t, p2 =
        if p1 >= 50. then
            if p3 >= 50. then
                (5., p1)
            else
                (rtau(60. -. p3), 60.)
        else
            if p3 >= 50. then
                (5., 40.)
            else
                (rtau(p1 -. p3), p1)
    in t *. (p2 -. p3)

let hybrid pdot(p3, p1) =
    (* power derivative *)
    present (period(0.1)) -> pdot_disc(p3, p1) init pdot_disc(p3, p1)

let hybrid thrust(power, alt, rmach) =
    (* thrust lookup-table *)
    let alt = max 0.01 alt in (* uh, why not 0? *)
    let h = 0.0001 *. alt in
    let rm = 5. *. rmach in
    let tmil = lut2d thrust_b h rm in

    if hybrid_lt (power, 50.) then
        let tidl = lut2d thrust_a h rm in
        tidl +. (tmil -. tidl) *. power *. 0.02
    else
        let tmax = lut2d thrust_c h rm in
        tmil +. (tmax -. tmil) *. (power -. 50.) *. 0.02

let dampp_aux (da, k, l, i) =
    (get dampp_a (k-1) i) +.
    (abs_float da) *. ((get dampp_a (l-1) i) -. (get dampp_a (k-1) i))

let hybrid dampp(alpha) = d0, d1, d2, d3, d4, d5, d6, d7, d8 where
    (* alpha in degrees *)
    let s = 0.2 *. alpha +. 2. in
    do
            d0 = lut1d_row dampp_a s 0 alpha
        and d1 = lut1d_row dampp_a s 1 alpha
        and d2 = lut1d_row dampp_a s 2 alpha
        and d3 = lut1d_row dampp_a s 3 alpha
        and d4 = lut1d_row dampp_a s 4 alpha
        and d5 = lut1d_row dampp_a s 5 alpha
        and d6 = lut1d_row dampp_a s 6 alpha
        and d7 = lut1d_row dampp_a s 7 alpha
        and d8 = lut1d_row dampp_a s 8 alpha
    done


let morellif16(alpha, beta, de, da, dr, p, q, r, cbar, b, v, xcg, xcgref) =
    cx, cy, cz, cl, cm, cn where rec

    (* bounds alpha between -10 deg and 45 deg *)
    (* let alpha=max (-10. *. pi /. 180.) (min (45. *. pi /. 180.) alpha) in *)
    (* bounds beta between -30 deg and 30 deg *)
    (* let beta = max (-30. *. pi /. 180.) (min (30. *. pi /. 180.) beta) in *)
    (* bounds elevator deflection between -25 deg and 25 deg *)
    (* let de = max (-25. *. pi /. 180.) (min(25. *. pi /. 180.) de) in *)
    (* bounds aileron deflection between -21.5 deg and 21.5 deg *)
    (* let da = max (-21.5 *. pi /. 180.) (min (21.5 *. pi /. 180.) da) in *)
    (* bounds rudder deflection between -30 deg and 30 deg *)
    (* let dr = max (-30. *. pi /. 180.) (min (30. *. pi /. 180.) dr) in *)

    (* reference longitudinal cg position in Morelli f16 model *)
    (* let xcgref = 0.35 in *)

    let phat = p *. b /. (2. *. v)
    and qhat = q *. cbar /. (2. *. v)
    and rhat = r *. b /. (2. *. v)

    and a0 = -1.943367e-2 and a1 = 2.136104e-1 and a2 = -2.903457e-1
    and a3 = -3.348641e-3 and a4 = -2.060504e-1 and a5 = 6.988016e-1
    and a6 = -9.035381e-1

    and b0 = 4.833383e-1 and b1 = 8.644627 and b2 = 1.131098e1
    and b3 = -7.422961e1 and b4 = 6.075776e1

    and c0 = -1.145916 and c1 = 6.016057e-2 and c2 = 1.642479e-1

    and d0 = -1.006733e-1 and d1 = 8.679799e-1
    and d2 = 4.260586 and d3 = -6.923267

    and e0 = 8.071648e-1 and e1 = 1.189633e-1
    and e2 = 4.177702 and e3 = -9.162236

    and f0 = -1.378278e-1 and f1 = -4.211369 and f2 = 4.775187
    and f3 = -1.026225e1 and f4 = 8.399763 and f5 = -4.354000e-1

    and g0 = -3.054956e1 and g1 = -4.132305e1 and g2 = 3.292788e2
    and g3 = -6.848038e2 and g4 = 4.080244e2

    and h0 = -1.05853e-1 and h1 = -5.776677e-1 and h2 = -1.672435e-2
    and h3 = 1.357256e-1 and h4 = 2.172952e-1 and h5 = 3.464156
    and h6 = -2.835451 and h7 = -1.098104

    and i0 = -4.126806e-1 and i1 = -1.189974e-1
    and i2 = 1.247721 and i3 = -7.391132e-1

    and j0 = 6.250437e-2 and j1 = 6.067723e-1 and j2 = -1.101964
    and j3 = 9.100087 and j4 = -1.192672e1

    and k0 = -1.463144e-1 and k1 = -4.07391e-2 and k2 = 3.253159e-2
    and k3 = 4.851209e-1 and k4 = 2.978850e-1 and k5 = -3.746393e-1
    and k6 = -3.213068e-1

    and l0 = 2.635729e-2 and l1 = -2.192910e-2 and l2 = -3.152901e-3
    and l3 = -5.817803e-2 and l4 = 4.516159e-1 and l5 = -4.928702e-1
    and l6 = -1.579864e-2

    and m0 = -2.029370e-2 and m1 = 4.660702e-2 and m2 = -6.012308e-1
    and m3 = -8.062977e-2 and m4 = 8.320429e-2 and m5 = 5.018538e-1
    and m6 = 6.378864e-1 and m7 = 4.226356e-1

    and n0 = -5.19153 and n1 = -3.554716 and n2 = -3.598636e1
    and n3 = 2.247355e2 and n4 = -4.120991e2 and n5 = 2.411750e2

    and o0 = 2.993363e-1 and o1 = 6.594004e-2 and o2 = -2.003125e-1
    and o3 = -6.233977e-2 and o4 = -2.107885 and o5 = 2.141420
    and o6 = 8.476901e-1

    and p0 = 2.677652e-2 and p1 = -3.298246e-1 and p2 = 1.926178e-1
    and p3 = 4.013325 and p4 = -4.404302

    and q0 = -3.698756e-1 and q1 = -1.167551e-1 and q2 = -7.641297e-1

    and r0 = -3.348717e-2 and r1 = 4.276655e-2 and r2 = 6.573646e-3
    and r3 = 3.535831e-1 and r4 = -1.373308 and r5 = 1.237582
    and r6 = 2.302543e-1 and r7 = -2.512876e-1 and r8 = 1.588105e-1
    and r9 = -5.199526e-1

    and s0 = -8.115894e-2 and s1 = -1.156580e-2 and s2 = 2.514167e-2
    and s3 = 2.038748e-1 and s4 = -3.337476e-1 and s5 = 1.004297e-1
    in

    let cx0 = a0 +. a1 *. alpha +. a2 *. de**2. +. a3 *. de +.
              a4 *. alpha *. de +. a5 *. alpha**2. +. a6 *. alpha**3.
    and cxq = b0 +. b1 *. alpha +. b2 *. alpha**2. +. b3 *. alpha**3. +.
              b4 *. alpha**4.
    and cy0 = c0 *. beta +. c1 *. da +. c2 *. dr
    and cyp = d0 +. d1 *. alpha +. d2 *. alpha**2. +. d3 *. alpha**3.
    and cyr = e0 +. e1 *. alpha +. e2 *. alpha**2. +. e3 *. alpha**3.
    and cz0 = (f0 +. f1 *. alpha +. f2 *. alpha**2. +. f3 *. alpha**3. +.
              f4 *. alpha**4.) *. (1. -. beta**2.) +. f5 *. de
    and czq = g0 +. g1 *. alpha +. g2 *. alpha**2. +. g3 *. alpha**3. +.
              g4 *. alpha**4.
    and cl0 = h0 *. beta +. h1 *. alpha *. beta +. h2 *. alpha**2. *. beta +.
              h3 *. beta**2. +. h4 *. alpha *. beta**2. +.
              h5 *. alpha**3. *. beta +.
              h6 *. alpha**4. *. beta +. h7 *. alpha**2. *. beta**2.
    and clp = i0 +. i1 *. alpha +. i2 *. alpha**2. +. i3 *. alpha**3.
    and clr = j0 +. j1 *. alpha +. j2 *. alpha**2. +. j3 *. alpha**3. +.
              j4 *. alpha**4.
    and clda = k0 +. k1 *. alpha +. k2 *. beta +. k3 *. alpha**2. +.
               k4 *. alpha *. beta +. k5 *. alpha**2. *. beta +. k6 *. alpha**3.
    and cldr = l0 +. l1 *. alpha +. l2 *. beta +. l3 *. alpha *. beta +.
               l4 *. alpha**2. *. beta +. l5 *. alpha**3. *. beta +.
               l6 *. beta**2.
    and cm0 = m0 +. m1 *. alpha +. m2 *. de +. m3 *. alpha *. de +.
              m4 *. de**2. +. m5 *. alpha**2. *. de +. m6 *. de**3. +.
              m7 *. alpha *. de**2.
    in

    let cmq = n0 +. n1 *. alpha +. n2 *. alpha**2. +. n3 *. alpha**3. +.
              n4 *. alpha**4. +. n5 *. alpha**5.
    and cn0 = o0 *. beta +. o1 *. alpha *. beta +. o2 *. beta**2. +.
              o3 *. alpha *. beta**2. +. o4 *. alpha**2. *. beta +.
              o5 *. alpha**2. *. beta**2. +. o6 *. alpha**3. *. beta
    and cnp = p0 +. p1 *. alpha +. p2 *. alpha**2. +. p3 *. alpha**3. +.
              p4 *. alpha**4.
    and cnr = q0 +. q1 *. alpha +. q2 *. alpha**2.
    and cnda = r0 +. r1 *. alpha +. r2 *. beta +. r3 *. alpha *. beta +.
               r4 *. alpha**2. *. beta +. r5 *. alpha**3. *. beta +.
               r6 *. alpha**2. +. r7 *. alpha**3. +. r8 *. beta**3. +.
               r9 *. alpha *. beta**3.
    and cndr = s0 +. s1 *. alpha +. s2 *. beta +. s3 *. alpha *. beta +.
               s4 *. alpha**2. *. beta +. s5 *. alpha**2.
    in do

        cx = cx0 +. cxq *. qhat
    and cy = cy0 +. cyp *. phat +. cyr *. rhat
    and cz = cz0 +. czq *. qhat
    and cl = cl0 +. clp *. phat +. clr *. rhat +. clda *. da +. cldr *. dr
    and cm = cm0 +. cmq *. qhat +. cz *. (xcgref -. xcg)
    and cn = cn0 +. cnp *. phat +. cnr *. rhat +. cnda *. da +. cndr *. dr -.
             cy *. (xcgref -. xcg) *. (cbar /. b)
    done
