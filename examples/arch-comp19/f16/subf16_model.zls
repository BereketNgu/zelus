(*
    This model is used in the ARCH competition of 2019.
    It has been described by Peter Heidlauf, Alexander Collins,
    Michael Bolender and Stanley Bak in "Verification Challenges in F-16
    Ground Collision Avoidance and Other Automated Maneuvers"

    The current folder implemens the 3rd case described in the paper :
    the outer-loop performs Ground-Collision Avoidance.

    Adapted by Ismail Bennani (ismail.lahkim.bennani@ens.fr)
*)

(* Naming conventions :
    Variables starting with c_ are constants
*)

(* State variables
    0   vt = air speed, VT    (ft/sec)
    1   alpha = angle of attack, alpha  (rad)
    2   beta = angle of sideslip, beta (rad)
    3   phi = roll angle, phi  (rad)
    4   theta = pitch angle, theta  (rad)
    5   psi = yaw angle, psi  (rad)
    6   p = roll rate, P  (rad/sec)
    7   q = pitch rate, Q  (rad/sec)
    8   r = yaw rate, R  (rad/sec)
    9   x9 = northward horizontal displacement, pn  (feet)
    10  x10 = eastward horizontal displacement, pe  (feet)
    11  alt = altitude, h  (feet)
    12  power = engine thrust dynamics lag state, pow
*)

(* Input variables
    thtlc = throttle command  0.0 < u(1) < 1.0
    el = elevator command in degrees
    ail = aileron command in degrees
    rdr = rudder command in degrees
*)

(*
    cxt is the x-axis aerodynamic force coefficient
    cyt is the sideforce coefficient
    czt is the z-axis force coefficient

    clt is a sum of the rolling moment coefficients
    cmt is the pitching moment coefficient
    cnt is a sum of the yawing moment coefficients
*)

let static s = 300.
let static b = 30.
let static cbar = 11.32
let static rm = 1.57e-3
let static xcg = 0.35
let static xcgr = 0.35
let static he = 160.0
let static c1 = -0.770
let static c2 = 0.02755
let static c3 = 1.055e-4
let static c4 = 1.642e-6
let static c5 = 0.9604
let static c6 = 1.759e-2
let static c7 = 1.792e-5
let static c8 = -0.7336
let static c9 = 1.587e-5
let static rtod = 57.29578    (* rad to deg coefficient *)
let static dtor = 1.745329e-2 (* deg to rad coefficient *)
let static g = 32.17

open Utils
open Types

let hybrid derivatives(state, inp) = res, ny, nz where
  rec der time = 1. init 0.

  (* air data computer and engine model *)
  and amach, qbar = adc(state.vt, state.alt)
  and cpow = tgear(inp.thtlc)
  and t = thrust(state.power, state.alt, amach)
  and dail = inp.ail /. 20.
  and drdr = inp.rdr /. 30.

  (* morelli model (polynomial version) *)
  and cxt, cyt, czt, clt, cmt, cnt =
    morellif16(state.alpha, state.beta, inp.el *. dtor, inp.ail *. dtor,
               inp.rdr *. dtor, state.p, state.q, state.r, cbar, b, state.vt,
               xcg, xcgr)

  (* add damping derivatives *)
  and tvt = 0.5 /. state.vt
  and b2v = b *. tvt
  and cq = cbar *. state.q *. tvt

  (* get ready for state equations *)
  and d0, d1, d2, d3, d4, d5, d6, d7, d8 = dampp(state.alpha *. rtod)
  and cxt' = cxt +. cq *. d0
  and cyt' = cyt +. b2v *. (d1 *. state.r +. d2 *. state.p)
  and czt' = czt +. cq *. d3
  and clt' = clt +. b2v *. (d4 *. state.r +. d5 *. state.p)
  and cmt' = cmt +. cq *. d6 +. czt *. (xcgr -. xcg)
  and cnt' = cnt +. b2v *. (d7 *. state.r +. d8 *. state.p) -.
            cyt *. (xcgr -. xcg) *. cbar /. b
  and cbta = cos(state.beta)
  and u = state.vt *. cos(state.alpha) *. cbta
  and v = state.vt *. sin(state.beta)
  and w = state.vt *. sin(state.alpha) *. cbta
  and sth = sin(state.theta)
  and cth = cos(state.theta)
  and sph = sin(state.phi)
  and cph = cos(state.phi)
  and spsi = sin(state.psi)
  and cpsi = cos(state.psi)
  and qs = qbar *. s
  and qsb = qs *. b
  and rmqs = rm *. qs
  and gcth = g *. cth
  and qsph = state.q *. sph
  and ay = rmqs *. cyt'
  and az = rmqs *. czt'

  (* force equations *)
  and udot = state.r *. v -. state.q *. w -. g *. sth +. rm *. (qs *. cxt' +. t)
  and vdot = state.p *. w -. state.r *. u +. gcth *. sph +. ay
  and wdot = state.q *. u -. state.p *. v +. gcth *. cph +. az
  and dum = (u *. u +. w *. w)

  and der_vt = (u *. udot +. v *. vdot +. w *. wdot) /. state.vt
  and der_alpha = (u *. wdot -. w *. udot) /. dum
  and der_beta = (state.vt *. vdot -. v *. der_vt) *. cbta /. dum

  (* kinematics *)
  and der_phi = state.p +. (sth /. cth) *. (qsph +. state.r *. cph)
  and der_theta = state.q *. cph -. state.r *. sph
  and der_psi = (qsph +. state.r *. cph) /. cth

  (* moments *)
  and der_p = (c2 *. state.p +. c1 *. state.r +. c4 *. he) *. state.q +.
               qsb *. (c3 *. clt' +. c4 *. cnt')

  and der_q = (c5 *. state.p -. c7 *. he) *. state.r +. c6 *.
              (state.r *. state.r -. state.p *. state.p) +.
              qs *. cbar *. c7 *. cmt'
  and der_r = (c8 *. state.p -. c2 *. state.r +. c9 *. he) *.
              state.q +. qsb *. (c4 *. clt' +. c9 *. cnt')

  (* navigation *)
  and t1 = sph *. cpsi
  and t2 = cph *. sth
  and t3 = sph *. spsi
  and s1 = cth *. cpsi
  and s2 = cth *. spsi
  and s3 = t1 *. sth -. cph *. spsi
  and s4 = t3 *. sth +. cph *. cpsi
  and s5 = sph *. cth
  and s6 = t2 *. cpsi +. t3
  and s7 = t2 *. spsi -. t1
  and s8 = cph *. cth
  (* north speed *)
  and der_x9 = u *. s1 +. v *. s3 +. w *. s6
  (* east speed *)
  and der_x10 = u *. s2 +. v *. s4 +. w *. s7
  (* vertical speed *)
  and der_alt = u *. sth -. v *. s5 -. w *. s8

  and der_power = pdot(state.power, cpow)

  (* outputs *)

  (* sets distance normal accel is in front of the c.g. (xa = 15.0 at pilot) *)
  and xa = 15.0
  (* moves normal accel in front of c.g. *)
  and az' = az -. xa *. der_q
  (* if adjust_cy: True in python code *)
  (* moves side accel in front of c.g. *)
  and ay' = ay +. xa *. der_r

  (* For extraction of Nz *)

  (* zeroed at 1 g, positive g = pulling up *)
  and nz = (-.az' /. g) -. 1.
  and ny = ay' /. g

  and res = {
      vt = der_vt; alpha = der_alpha; beta = der_beta; phi = der_phi;
      theta = der_theta; psi = der_psi; p = der_p; q = der_q; r = der_r;
      x9 = der_x9; x10 = der_x10; alt = der_alt; power = der_power;
  }
