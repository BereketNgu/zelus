open Wt_common

(* all these parameters are taken from
   benchmarks/wind-turbine/SimplifiedTurbine_ParameterFile.m *)

type vscontrol = {
    rgn3MP  : float; (* Minimum pitch angle at which the torque is computed as if we are in region 3 regardless of the generator speed, rad. -- chosen to be 1.0 degree above PC_MinPit *)
    ctInSp  : float; (* Transitional generator speed (HSS side) between regions 1 and 1 1/2, rad/s. *)
    maxRat  : float; (* Maximum torque rate (in absolute value) in torque controller, N-m/s. *)
    maxTq   : float; (* Maximum generator torque in Region 3 (HSS side), N-m. -- chosen to be 10% above VS_RtTq = 43.09355kNm *)
    rgn2K   : float; (* Generator torque constant in Region 2 (HSS side), N-m/(rad/s)^2. *)
    rgn2Sp  : float; (* Transitional generator speed (HSS side) between regions 1 1/2 and 2, rad/s. *)
    rtGnSp  : float; (* Rated generator speed (HSS side), rad/s. -- chosen to be 99% of PC_RefSpd *)
    rtPwr   : float; (* Rated generator generator power in Region 3, Watts. -- chosen to be 5MW divided by the electrical generator efficiency of 94.4% *)
    slPc    : float; (* Rated generator slip percentage in Region 2 1/2, %. *)
    sySp    : float;
    slope15 : float;
    slope25 : float;
    trGnSp  : float;
    vs_filterConstant : float;
}

type cpc = {
    gS_factor : float;
    kI : float;
    kP : float;
    tI : float;
    antiWindUp : float;
}

type pitch = {
    omega     : float; (* rad/s undamped natural frequency of the blade pitch actuator *)
    xi        : float; (* -     damping factor of the blade pitch actuator *)
    delay     : float; (* s     pitch delay (matlab risetime of second order lag) *)
    rateLimit : float; (* [rad/s] *)
    max       : float; (* [rad] *)
    min       : float; (* [rad] *)
    theta0    : float;
    thetaDot0 : float;
    actuatorType : int;
    pitch_filterConstant : float;
    cpc : cpc;
}

type params = {
    (* global constants *)
    rho          : float; (* kg/m^3 air density *)
    rotor        : float; (* m      rotor *)
    lambda_opt   : float; (* -      tip speed ratio *)
    omega_rated  : float; (* rpm *)
    wind_rated   : float;
    eta          : float;

    (* fore-aft tower dynamics *)
    h_H : float; (* m  Hub height *)
    m_T : float; (* kg Mass Tower + Monopile (Support Shallow) *)
    m_N : float; (* kg Mass Nacelle *)
    m_H : float; (* kg Mass Hub *)
    m_B : float; (* kg Mass Blade *)
    f_0 : float; (* Hz naturall frequency 1st Tower FA *)
    d_s : float; (* - *)
    mTe : float; (* kg     tower equivalent modal mass ([Gasch] p.294) *)
    cTe : float; (* kg/s   tower structual damping (sigma=C_T/(2M_T)=D*w_0, w_0=f_0*2*pi, [Gasch] p.294) *)
    kTe : float; (* kg/s^2 tower bending stiffness (w_0=sqrt(K_T/M_T),[Gasch] p.294) *)

    (* drive train dynamics *)
    j_H     : float; (* kgm^2 Hub Inertia About Shaft Axis *)
    j_B     : float; (* kgm^2 Second Mass Moment of Inertia (w.r.t. Root) *)
    j_G     : float; (* kgm^2 Generator Inertia About High-Speed Shaft *)
    gBRatio : float; (* -     Gearbox ratio *)
    inertia : float; (* kgm^2 sum of the moments of inertia about the rotation axis of the rotor hub and blades *)
    omega_g_rated : float;

    (* initial conds for integrators *)
    xt_dot0  : float;
    xT0      : float;
    omega0   : float;
    omega_g0 : float;

    (* VS Control (Paramters taken from DISCON.f90) *)
    genEff    : float;
    vscontrol : vscontrol;

    (* Collective Blade Pitch Controller *)
    pitch : pitch
}

let discrete get_default () =
    let init_omega = Array.of_list
        [0.;0.1267;0.2534;0.3801;0.5068;0.6336;0.7603;0.8870;1.0137;1.1404;
         1.2671;1.2671;1.2671;1.2671;1.2671;1.2671;1.2671;1.2671;1.2671;1.2671;
         1.2671;1.2671;1.2671;1.2671;1.2671;1.2671]
    in
    let init_v0 = Array.of_list
        [0.;1.;2.;3.;4.;5.;6.;7.;8.;9.;10.;11.4;12.;13.;14.;15.;16.;17.;18.;19.;
         20.;21.;22.;23.;24.;25.]
    in
    let init_pitch = Array.of_list
        [0.;0.;0.;0.;0.;0.;0.;0.;0.;0.;0.;0.;
         0.0529;0.1152;0.1518;0.1824;0.2105;0.2363;0.2604;0.2833;0.3049;0.3264;
         0.3480;0.3697;0.3901;0.4096]
    in

    (* params *)
    let tmax = 630. in
    let v0_0 = 9.6076 in
    let rho          = 1.225 in
    let rotor        = 126./.2. in
    let lambda_opt   = 7.55 in
    let omega_rated  = rpm2radPs(12.1) in
    let wind_rated   = 11.2 in
    let eta          = 0.944 in
    let h_H = 90. in
    let m_T = 522617. in
    let m_N = 240000. in
    let m_H = 56780. in
    let m_B = 17740. in
    let f_0 = 0.31994 in
    let d_s = 0.01 in
    let mTe = 0.25*.m_T+.m_N+.m_H+.3.*.m_B in
    let cTe = 4.*.pi*.mTe*.d_s*.f_0 in
    let kTe = mTe*.(2.*.pi*.f_0)**2. in

    let j_H     = 115926. in
    let j_B     = 11776047. in
    let j_G     = 534.116 in
    let gBRatio = 1./.97. in
    let inertia = j_H+.3.*.j_B+.j_G*.gBRatio**2. in
    let omega_g_rated = omega_rated/.gBRatio in

    let xt_dot0  = 0. in
    let xT0      = (v0_0**2.*.1./.2.*.rho*.pi*.rotor**2.)/.kTe in
    let omega0   = interp1(init_v0,init_omega,v0_0) in
    let omega_g0 = omega0/.gBRatio in

    (* vscontrol *)
    let genEff = 0.944 in
    let vs_rtPwr      = 5296610.0 in
    let vs_rgn3MP     =       0.01745329 in
    let vs_ctInSp     =      70.16224 in
    let vs_maxRat     =   15000.0 in
    let vs_maxTq      =   47402.91 in
    let vs_rgn2K      =       2.332287 in
    let vs_rgn2Sp     =      91.21091 in
    let vs_rtGnSp     =     121.6805 in
    let vs_rtPwr      = 5296610.0 in
    let vs_slPc       =      10.0 in
    let vs_sySp       = vs_rtGnSp/.(1.0+.0.01*.vs_slPc) in
    let vs_slope15    =
        (vs_rgn2K*.vs_rgn2Sp*.vs_rgn2Sp)/.(vs_rgn2Sp-.vs_ctInSp)
    in
    let vs_slope25    =
        (vs_rtPwr/.vs_rtGnSp           )/.(vs_rtGnSp-.vs_sySp  )
    in
    let vs_trGnSp =
        if (vs_rgn2K = 0.0) then vs_sySp
        else (vs_slope25-.sqrt(vs_slope25*.(vs_slope25-.4.0*.vs_rgn2K*.vs_sySp)))/.(2.0*.vs_rgn2K)
    in
    let vs_filterConstant = 1./.(0.25*.2.*.pi) in

    (* pitch *)
    let pitch_omega     = 2.*.pi in
    let pitch_xi        = 0.7 in
    let pitch_delay     = 0.3545 in
    let pitch_rateLimit = deg2rad(8.) in
    let pitch_max       = deg2rad(90.) in
    let pitch_min       = 0. in
    let pitch_theta0    = interp1(init_v0,init_pitch,v0_0) in
    let pitch_thetaDot0 = 0. in
    let pitch_actuatorType = 1 in
    let pitch_filterConstant = 1./.(0.25*.2.*.pi) in

    let cpc_gS_factor  = 0.1099965 in
    let cpc_kI         = 0.008068634 in
    let cpc_kP         = 0.01882681 in
    let cpc_tI         = cpc_kP/.cpc_kI in
    let cpc_antiWindUp = 1. in
{
    rho          = rho;
    rotor        = rotor;
    lambda_opt   = lambda_opt;
    omega_rated  = omega_rated;
    wind_rated   = wind_rated;
    eta          = eta;
    h_H = h_H;
    m_T = m_T;
    m_N = m_N;
    m_H = m_H;
    m_B = m_B;
    f_0 = f_0;
    d_s = d_s;
    mTe = mTe;
    cTe = cTe;
    kTe = kTe;
    j_H     = j_H;
    j_B     = j_B;
    j_G     = j_G;
    gBRatio = gBRatio;
    inertia = inertia;
    omega_g_rated = omega_g_rated;
    xt_dot0 = xt_dot0;
    xT0 = xT0;
    omega0 = omega0;
    omega_g0 = omega_g0;

    genEff = genEff;
    vscontrol = {
        rgn3MP  = vs_rgn3MP;
        ctInSp  = vs_ctInSp;
        maxRat  = vs_maxRat;
        maxTq   = vs_maxTq;
        rgn2K   = vs_rgn2K;
        rgn2Sp  = vs_rgn2Sp;
        rtGnSp  = vs_rtGnSp;
        rtPwr   = vs_rtPwr;
        slPc    = vs_slPc;
        sySp    = vs_sySp;
        slope15 = vs_slope15;
        slope25 = vs_slope25;
        trGnSp  = vs_trGnSp;
        vs_filterConstant = vs_filterConstant;
    };

    pitch = {
        omega     = pitch_omega;
        xi        = pitch_xi;
        delay     = pitch_delay;
        rateLimit = pitch_rateLimit;
        max       = pitch_max;
        min       = pitch_min;
        theta0    = pitch_theta0;
        thetaDot0 = pitch_thetaDot0;
        actuatorType = pitch_actuatorType;
        pitch_filterConstant = pitch_filterConstant;
        cpc = {
            gS_factor = cpc_gS_factor;
            kI = cpc_kI;
            kP = cpc_kP;
            tI = cpc_tI;
            antiWindUp = cpc_antiWindUp;
        }
    };
}
