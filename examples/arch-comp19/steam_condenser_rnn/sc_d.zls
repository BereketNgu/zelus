open Sc_utils

let saturate (low, high, v) = min (max v low) high

node integrate_fwd (tstep, dy, y0) = y where
    rec y = y0 fby (y +. tstep *. dy)

node integrate_bwd (tstep, dy, y0) = y where
    rec y = y0 -> (pre y +. tstep *. dy)

node step (tstep, y0, t0, y1) =
    let t = integrate_bwd (tstep, 1., 0.) in
    if t < t0 then y0 else y1

node transfer_fn (tstep, x, denom1, denom2, y0) = y where
    rec y = integrate_fwd (tstep, (1. /. denom1) *. (x -. y *. denom2), y0)

node sc_subsystem (tstep, fs, tcw, fcw) = temp, temp_c, fc, fcw_, q, p where
    rec p = transfer_fn (tstep, aux_p, actuator_time_constant /. 2., 1., p_setpoint)
    and aux_p = integrate_fwd (tstep, daux_p, p_setpoint)
    and daux_p = 0.461526 /. volume *. (fs -. fc) *. temp_c
    and temp_c = lookup_p_t aux_p
    and fc = q /. (lookup_lambda aux_p)
    and q = dTm /. (0.0872924756541668 /. (fcw_ ** 0.8) +. 0.00073786772008033)
    and dTm = (temp -. tcw) /. log((temp_c -. tcw) /. (temp_c  -. temp))
    and temp = integrate_fwd (tstep, dtemp, temp_setpoint)
    and dtemp = (q /. 4.2 +. (tcw -. temp) *. fcw_) /. cw_holdup
    and fcw_ = transfer_fn (tstep, aux_fcw, 1., 1., fcw_setpoint)
    and aux_fcw = saturate (0., 200., fcw +. fcw_setpoint)

let process_input x = mapminmax (in_xmin, in_xmax, in_ymin, in_ymax, x)
let process_output y = mapminmax (out_ymin, out_ymax, out_xmin, out_xmax, y)
let tansig x = 2. /. (1. +. exp(-2. *. x)) -. 1.

node layer1 (tstep, i1) = (o1, o2, o3) where
    (* output o *)
    rec o1 = tansig (iw1 +. lw1 +. b1_1)
    and o2 = tansig (iw2 +. lw2 +. b1_2)
    and o3 = tansig (iw3 +. lw3 +. b1_3)

    (* iw{1,1} *)
    and iw1 = i1 *. iw1_1
    and iw2 = i1 *. iw1_2
    and iw3 = i1 *. iw1_3

    (* lw{1,1} *)
    and lw1 = d1 *. lw1_1_1 +. d2 *. lw1_1_2 +. d3 *. lw1_1_3 +. d4 *. lw1_1_4 +.
              d5 *. lw1_1_5 +. d5 *. lw1_1_5 +. d6 *. lw1_1_6
    and lw2 = d1 *. lw1_2_1 +. d2 *. lw1_2_2 +. d3 *. lw1_2_3 +. d4 *. lw1_2_4 +.
              d5 *. lw1_2_5 +. d5 *. lw1_2_5 +. d6 *. lw1_2_6
    and lw3 = d1 *. lw1_3_1 +. d2 *. lw1_3_2 +. d3 *. lw1_3_3 +. d4 *. lw1_3_4 +.
              d5 *. lw1_3_5 +. d5 *. lw1_3_5 +. d6 *. lw1_3_6

    (* delays 2 *)
    and d1 = transfer_fn (tstep, o1, 1., 10., 0.)
    and d2 = transfer_fn (tstep, o2, 1., 10., 0.)
    and d3 = transfer_fn (tstep, o3, 1., 10., 0.)
    and d4 = transfer_fn (tstep, d1, 1., 10., 0.)
    and d5 = transfer_fn (tstep, d2, 1., 10., 0.)
    and d6 = transfer_fn (tstep, d3, 1., 10., 0.)

node layer2 (tstep, (i1, i2, i3)) = o1 where
    rec o1 = lw +. b2_1
    and lw = i1 *. lw2_1_1 +. i2 *. lw2_1_2 +. i3 *. lw2_1_3

node nnet (tstep, inp) = outp where
    rec processed_inp = process_input inp
    and layer1_out = layer1 (tstep, processed_inp)
    and layer2_out = layer2 (tstep, layer1_out)
    and outp = process_output layer2_out

node sc (tstep, fs) = temp, fcw, q, p where
    rec tcw = 60.
    and temp, temp_c, fc, fcw, q, p = sc_subsystem (tstep, fs, tcw, nnet_output)
    and nnet_input = p -. (step (tstep, 90., 2., 87.))
    and nnet_output = nnet (tstep, nnet_input)

open Scope
let tstep = 0.1
node main () =
    let rec t = integrate_bwd (tstep, 1., 0.) in

    let fs = 4. in

    let temp, fcw, q, p = sc (tstep, fs) in

    let s1 = scope (3.99, 4.01, ("Fs", linear, fs)) in
    let s2 = scope (78.5, 80., ("T", linear, temp)) in
    let s3 = scope (100., 140., ("Fcw", linear, fcw)) in
    let s4 = scope (8000., 10000., ("Q", linear, q)) in
    let s5 = scope (80., 90., ("P", linear, p)) in
    window5("Steam condenser RNN", 40., t, s1, s2, s3, s4, s5)
