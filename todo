A faire vite:

- 11/12/2013.
  Inline: revoir l'inlining pour traiter correctement le cas des
  fonctions polymorphes. Actuellement, on ne maintient pas correctement
  les annotations de types une fois l'inlining realise.

- nettoyer le code de copystate.ml ou il est question
  d'horizon et de goagain;

- les conventions doivent etre abstraites. Il faut changer ce code.

- verifier la correction de la generation de
  code pour les automates lorsque les branches ont un etat.

Changement de syntaxe:

- Doit-on enlever l'operateur booleen "on" ? Il y a un conflit entre
  le "on" utilise dans les motifs et le "on" des expressions. E.g.,
  
  present (x on z) -> ...
  versus
  present x on z -> ...

Normalisation:

Clock calculus:
- let x = 1 when z in
  let k = 0 -> pre(x) + 1 in
  let r = 2 every m | 3 every l init 0 in
  let der s = last r + 1 init 0.0 in 
  ...
- x can only be used at clock 'a on z hence k; r can be used
  at clock 'a every m | l; last r can be used
  at any continuous clock faster (or equal) to 'a every m | l since
  it is initialized.

(1) der x = e init e0 reset z -> e1

x = present z -> e1 else last_x
last_x = e0 -> if d then pre(x) else lx

(2) x = present z -> e init e0

x = present z -> e else last_x
last_x = e0 -> pre(if d then x else last_x)

(3) x = e

Exemple:

x = f(x +. 1.0)

let hybrid f(x) = o where
  rec der o = x init 0.0 reset up(o) -> last o1
  and o1 = o + 1
