let node f (x_36, y_37, s_39) =
   let rec (* dv = {k_40} *)
   (k_40 : int) =
      (if x_36 then 1
       else (* defs: val m_63: int *)
         let rec (m_63 : int) =
                       0 -> ((* defs: last  mem m_62: int *)
                              (let rec (m_62 : int) = s_39 in
                               (m_62)) + 2) in
          m_63) in
   (* defs:  mem m_41: int *)
   let rec (* dv = {m_41} *)
     (m_41 : int) =
         (if y_37 then k_40
          else (* defs: val m_65: int *)
              let rec (m_65 : int) =
                          k_40 -> ((* defs: last  mem m_64: int *)
                                    (let rec (m_64 : int) = 1 in
                                     (m_64) + k_40)) in
              m_65) in 
    k_40 + m_41
    
(* let node f(x) =
  let rec
      forall i_42 in 0 .. 3, xi in x, yi in x
        do o = print_int xi;print_string " " and () = ()
      initialize last o = () done
   and y = 1
  and t = y + 1 and () = print_int 42 before () = () in
  print_newline (); print_int 1; print_int 2
 *)
    
(*
let hybrid f (x) =
  let rec der o = x +. 1.0 init 0.0 in
  let z = up(o +. x) in
  let h = 1 + 2 in
  let r = print_int h in
  let t = r in
  o, z
 *)
  
(*
let node g(x) = x + 1

let node f(g)(x, y) = run g 1 + 2

let node hh y =
  let rec o = 1 -> pre o + 1 in
       f g (42, o) + f g (42, o)
  *)  
