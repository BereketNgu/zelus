let node f(x) = 1 + last x
    
      (*
let node water1(y) =
  let rec init x = 1.0
  and automaton
      | On ->
          do x = 1.0 +. y
	  until (false -> pre (x = 2.0)) then On
      end in
  x +. x


let hybrid int(x0, x') =
  let rec der x = x' init x0 reset up(1.0 +. last x) -> 0.0 in x +. last x

let max = 0.2

let hybrid ff x z =
  let rec der o = x +. y +. y init 0.0
  and y = o +. x +. o1 
  and init y = 42.0
  and init o1 = 4.0
  and present z -> do o1 = 1.0 +. last o1 done in
  o, y, o1
 *)
    
(*

let hybrid f x = present z -> 0 -> last x + 1 init 0

x: -1 | 0
 *)
    
(*
let node water1(y) =
  let rec init x = 1.0
  and automaton
      | On ->
          do x = 1.0 +. y
	  until (false -> pre (x = 2.0)) then On
      end in
  x +. y

let hybrid water() =
  let rec init x = 1.0
  and automaton
      | On ->
          do der x = 1.0
	  unless ((* let r = last x +. 1.0 in *) up(last x) ) then On
      end in
  x
 *)
    
(* let node f(x) =
  let rec (* init y = 0 and init z = 0
    and *) match x with
	| _ -> do y = last z and z = 1 done (*  | _ -> do z = 1 done *)
  end in y, z
 *)

(*
let node ff(x) =
  let rec y = z + 1 and z = 1 + 2 in y, z
    
let hybrid fff(x) =
  let rec init y = 0 and init z = 0
    and match x with
	| 2 -> do y = last z + 1 and z = y + 2 done
	end in y, z
 *)
  
(* 
let node ffff(x) =
  let rec init y = 0 and init z = 0
    and match x with
	| _ -> do y = z done
  end in y, z

let node g(x, y) = x + 1, y + 2

let node fix g x =
   let rec o = run g (x, o) in o
   
let node h (x, y) = x + 1 -> pre y
   
let node gg x = fix h x
 *)
    
(*

let hybrid main (c, x1) =
   let rec der x = (last x) +. 1.0 init 0.0
       and match c with | true -> do y = x done | false -> do y = x +. 1.0 done
   in x    
 
let node f(x, y) =
  let rec o = pre(y) + 2
  and z = 2 + o
  and k =  pre(1->z) + 1 in
  k, 0 -> pre x + 2

let node ff g (x, y) =
  let rec x1, x2 = run g (0 -> x1, x2) in 0 -> x1 + x2 


let node f4(x, y) = (x+1, y+1)
let node f5(x, y) = (pre x+1, 1 fby y+1)

let node fff (x, y) = ff f5 (x, y)


let node vide (x, y) = x + y
let node vide2 x = vide (pre 1, 2)
 *)

(*
let discrete f x = if x = 2 then 1 else 2
  
let node two(x, y) = o where
  rec match x with
      | true -> do init o = y + 1 and o = last o + 1 done
      | false -> do o = last o - 1 done
      end
      
let hybrid h(n) (x:int[n]) = o where
  forall i in 0 .. (n-1), xi in x, oi out o do
    oi = x.(42 - i)
  done
      
let hybrid g c = (o, o5) where
 rec forall i in 0 .. 43, oi out o do
  forall j in 0 .. 42, oij out oi do
    der oij = 1.0 and init oij = 0.0
  done
  done and der o4 = o4 +. 1.0 init 0.0 and der o5 = o4 +. 2.0 init 0.0

let sum(c) = o where
  forall i in 0 .. 43, ci in c, oi out o do
    forall j in 0 .. 42, cij in ci, oij out oi do
      oij = cij +. 1.0
    done
  done

let hybrid main(c) =
  let o, _ = g(c) in sum(o)

(* let hybrid h () = o where
  forall i in 0 .. 42, oi out o do
    forall j in 0 .. 43, oij out oi do
      der oij = 1.0 and init oij = 0.0
    done
    done *)

   *)
(*
let hybrid g (x, z) =
  let rec present z -> do o = last o +. 1.0 done
          else do der o = x +. 1.0 done
  and init o = 42.0 in
  o +. 2.0

let hybrid h(x) =
  let rec o = up(x +. 1.0) in
  o, o*)
    
    (*
let node g x = o where
  rec automaton
  | S1 -> do o = 1 done
  | S2(x) -> do o = x+2 done
  end*)
  

(* let node micro_step_delay(x) = o where
  rec automaton
      | Await -> do r = 0 unless x(v) then Run(v)
      | Run(v) -> do r = v unless true then do emit o = v in Await
      end

let node micro_step_delay_weak(x) = o where
  rec automaton
      | Await -> do r = 0 until x(v) then Run(v)
      | Run(v) -> do r = v until true then do emit o = v in Await
      end *)

(*
let node g(x) = o where
  rec automaton
      | Await -> do o = 0 unless x(v) then Run(v)
o     | Run(v) -> do o = v unless true then Run(v+1)
      end
*)

(* 
let node fix(f)(x) = let rec y = f (x, y) in y

let node integr(x) = 0 fby x + 1

let node f() =
  let rec o1 = integr(o2) and o2 = integr(o1) in o1

let node g(f)() = let rec x = run f x in 1
let node ff x = 0 fby x

let node main() = g ff ()
    
let hybrid f(x0, x) = o where
  rec forall i in 0 .. 4, xi in x, oi out o do
	der oi = xi init x0 done *)

