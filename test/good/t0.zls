type t = { x: int; y: bool}

let f x = { x with x = 1 }

let node two (on) = x where
  rec automaton
     | A -> do emit x = 1 done
     | B -> do done
(* let node f x = o where
  rec forall i in 0 .. 3 cross j in 0 .. 4, xij in x by i by j, oji by j by i
      do
	oi = xi + 1
      and
	x = last x + 1
      and
	m = returns array of odone *)
      
(*
let hybrid g(z) =
  let rec init x = 0
  and present z -> do x = 1 done
  and present (disc(last x)) -> do () = print_int x done in
  x
 *)
    
(*
type cstate =
    { cvec: float array;
      dvec: float array;
      zin: float array;
      zout: bool array;
      mutable cpos : int;
      mutable zpos : int }
      
let int = machine(continuous) (g) { 
  memories
    i_15 : bool = false; cont xprime_13 : float = 0.; cont x_12 : float = 0.
    m : cstate; csize : int; zsize : int;
    
  method reset () =
    i_15 <- true;
    xprime_13.pos <- 0.
    
  method step ((time_14:float), ((x0_10:float), (xsecond_11:float))) =
    (((if i_15 then x_12.pos <- x0_10);
      i_15 <- false;
      xprime_13.der <- xsecond_11;
      x_12.der <- xprime_13.pos;
      g.dvec.(g.cpos) <- xsecond_11;
      g.dvec.(g.cpos + 1) <- xprime_13.pos;
      g.cpos <- g.cpos + 2;
      float)]}

   method csize = 2

   method zsize = 0
       *)
      
