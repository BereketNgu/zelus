% \iffalse meta-comment
%
% Copyright (C) 2014 by Timothy Bourke <tim@tbrk.org>
%                    and Marc Pouzet <pouzet@ens.fr>
% -------------------------------------------------------
% 
% This file may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.2
% of this license or (at your option) any later version.
% The latest version of this license is in:
%
%    http://www.latex-project.org/lppl.txt
%
% and version 1.2 or later is part of all distributions of LaTeX version 
% 1999/12/01 or later.
%
% CTAN Topic: callback, listing
% \fi
%
% \iffalse
%<*driver>
\ProvidesFile{runverbatim.dtx}
%</driver>
%<package>\NeedsTeXFormat{LaTeX2e}
%<package>\ProvidesPackage{runverbatim}
%<package>   [2014/02/14 v1.0 compile code samples and insert the results]
%<package>\RequirePackage{keyval}
%<package>\RequirePackage{kvoptions}
%<package>\RequirePackage{fancyvrb}
%<package>\RequirePackage{color}
%<package>\RequirePackage{listings}
%<package>\makeatletter
%<package>\lst@RequireAspects{writefile}
%<package>\SetupKeyvalOptions{family=RVRB,prefix=RVRB@}
%<package>\makeatother
%
%<*driver>
\documentclass{ltxdoc}

\usepackage{runverbatim}
\usepackage{url}
\usepackage{showexpl}
\usepackage{array}
\usepackage{longtable}

\lstset{
    basicstyle=\small\ttfamily,
    numbers=none,
    keywordstyle=\color{blue}\bfseries,
    pos=l,
}

\runverbatimsetup{
  msgstyle={formatcom=\footnotesize},
  errstyle={formatcom=\footnotesize}}

\EnableCrossrefs         \CodelineIndex
\RecordChanges

\newcommand{\refsec}[1]{Section~\ref{sec:#1}}

\begin{document}
  \DocInput{runverbatim.dtx}
  \PrintChanges
  \PrintIndex
\end{document}
%</driver>
% \fi
%
% \CheckSum{0}
%
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
%
% \changes{v1.0}{2014/02/14}{Initial version}
%
% \GetFileInfo{runverbatim.dtx}
%
% \DoNotIndex{\newcommand,\newenvironment}
% \DoNotIndex{\@file,\@ifundefined,\@tempboxa,\@undefined}
% \DoNotIndex{\arabic,\bgroup,\color}
% \DoNotIndex{\CurrentOption,\DeclareBoolOption,\DeclareComplementaryOption}
% \DoNotIndex{\DeclareDefaultOption,\DeclareStringOption,\DeclareVoidOption}
% \DoNotIndex{\def,\define@key,\edef,\egroup,\else,\emph,\expandafter}
% \DoNotIndex{\fi,\global,\hbox,\ifnum,\InputIfFileExists,\langle,\let}
% \DoNotIndex{\newcounter,\newif,\PackageWarning,\ProcessKeyvalOptions}
% \DoNotIndex{\rangle,\setbox,\setkeys,\space,\stepcounter}
% \DoNotIndex{\value,\@currentlabel,\@firstoftwo,\AtEndDocument,\em}
% \DoNotIndex{\closeout,\csname,\endcsname,\DefineVerbatimEnvironment}
% \DoNotIndex{\jobname,\kvsetkeys,\label,\newwrite,\noexpand,\openout}
% \DoNotIndex{\partopsep,\setlength,\thepage,\write}
% \expandafter\DoNotIndex\expandafter{\string\$}
%
% \title{The \textsf{runverbatim} package\thanks{This document
%   corresponds to \textsf{runverbatim}~\fileversion, dated \filedate.}}
% \author{Timothy Bourke and Marc Pouzet}
%
% \maketitle

% \section{Introduction}
%
% User manuals and papers about programming languages usually contain many 
% code samples, often with accompanying compiler messages, giving the types 
% or values of declarations, or errors explaining why certain declarations 
% are invalid.
% Packages like |fancyvrb|\footnote{\url{http://www.ctan.org/pkg/fancyvrb}} 
% and |listings|\footnote{\url{http://www.ctan.org/pkg/listings}} are ideal 
% for displaying code---this package extends them slightly to facilitate 
% passing this same code through a compiler and displaying the results.
% While it does not focus on a specific programming language, it is intended 
% to work well with ML-like languages.
%
% As an example, the text at left below is generated by the \LaTeX{} code at 
% right:
%
% \iffalse
%<*example>
% \fi
\begin{LTXexample}
Code samples are included
verbatim and the results of
compilation can be included
automatically:
\begin{runverbatim}[withresult]
let inc x = x + 1
let y = inc 3
\end{runverbatim}
\end{LTXexample}
% \iffalse
%</example>
% \fi
%
% A first pass through |latex| generates both an |.rvrb| file,
% with parameters for the compiler, and an |.ml| file containing the source 
% code (i.e., the two lines in the example above).
% Running the |runverbatim.sh| script processes these files to produce a 
% |.tex| file with the results of compilation.
% A second pass through |latex| updates the compiler message.
%
% \noindent
% It is possible to continue examples and to label them (to be continued at 
% some later point):
% \iffalse
%<*example>
% \fi
\begin{LTXexample}[pos=b]
These definitions follow on from the previous ones:
\begin{runverbatim}[continue,withresult,label=early]
let z = y + inc y
\end{runverbatim}
\end{LTXexample}
% \iffalse
%</example>
% \fi
%
% \bigskip\noindent
% Examples need not necessarily succeed:
% \iffalse
%<*example>
% \fi
\begin{LTXexample}[pos=b]
This code does not compile:
\begin{runverbatim}[fail, withresult]
let w = 1 + "four"
\end{runverbatim}
\end{LTXexample}
% \iffalse
%</example>
% \fi
%
% \section{Use}\label{sec:use}
%
% Using the package involves three elements:
% \begin{enumerate}
%
% \item
% The declaration \verb|\usepackage{runverbatim}|.\\
% \refsec{rvpkg} describes the options for configuring package behaviour.
%
% \item
% The environment \verb|runverbatim|.\\
% This environment is used like any other verbatim environment.
% \refsec{rvenv} describes options that may be given to control its 
% behaviour.
%
% \item
% The script \verb|runverbatim.sh|.\\
% Running this script passes the contents of each \verb|runverbatim| 
% environment through a compiler or interpreter and copies the resulting 
% output into a file.
%
% \end{enumerate}
%
% \subsection{Package options}\label{sec:rvpkg}
%
% \DescribeMacro{\runverbatimsetup}
% Package options are either given as optional arguments to 
% \verb|\usepackage| or via one or more calls to \verb|\runverbatimsetup|.
% The advantage of the latter is that macros are not expanded (for a 
% detailed explanation see the documentation for 
% |kvoptions|,\footnote{\url{http://www.ctan.org/pkg/kvoptions}} Section 
% 4.1, \emph{Package kvoptions-patch}).
% Options are passed as a comma separated list of \meta{key}|=|\meta{value} 
% pairs and single \meta{key}s.
%
% There are three classes of options: options controlling the default 
% behaviour of \verb|runverbatim|, options for configuring the 
% \verb|runverbatim.sh| script, and options controlling the display of code 
% and results.
%
% \subsubsection{Behavioural options}
%
% These options control the default behaviour of the \verb|runverbatim| 
% environment.
%
% \begin{longtable}{@{}>{\ttfamily}lp{75mm}>{\ttfamily}l@{}}
% \parbox{15mm}{option} & description & \parbox{25mm}{default}\\\hline
% withresult
% & Automatically show compilation results.
% & false
% \\
% skipone
% & Do not display the first line of code (see the description under the 
% |runverbatim| environment).
% &
% \\
% skiptwo
% & Do not display the first two lines of code (see the description under 
% the |runverbatim| environment).
% &
% \\
% \end{longtable}
%
% \subsubsection{Configuring compilation}
%
% These options are used for naming and placing the files generated by 
% \verb|runverbatim| environments.
% They are passed to the \verb|runverbatim.sh| script and thus control its 
% behaviour.
%
% \makeatletter
% \begin{longtable}{@{}>{\ttfamily}lp{75mm}>{\ttfamily}l@{}}
% \parbox{15mm}{option} & description & \parbox{25mm}{default}\\\hline
% prefix
% & Prefix for naming source files.
% & \RVRB@prefix
% \\
% ext
% & Extension of source files.
% & \RVRB@ext
% \\
% subdir
% & If defined, source files are created in the given subdirectory, which 
% must already exist.
% A final slash (\verb|/|) should not be given.
% & \RVRB@subdir
% \\
% prompt
% & The prompt displayed by \string\runverbatimcmd.
% & \RVRB@prompt
% \\
% compiler
% & Path of the compiler to execute.
% & \RVRB@compiler
% \\
% compilerflags
% & Flags passed to the compiler.
% These are not revealed by \string\runverbatimcmd.
% & \RVRB@compilerflags
% \\
% lastflags
% & Flags passed to the compiler before the main source file, i.e., the last 
% one given.
% & \RVRB@lastflags
% \\
% includecmd
% & The source language command for importing the definitions of another 
% file.
% & \RVRB@includecmd
% \\
% \end{longtable}
% \makeatother
%
% Each \verb|runverbatim| environment is assigned a number $n$, from zero, 
% and its contents are written to the file:
% \meta{subdir}|/|\meta{prefix}\meta{n}|.|\meta{ext},
% where \meta{n} is zero-padded to four characters.
% For example, by default, the fourth environment is written to the file 
% \verb|runverbatim0003.ml| in the current directory.
%
% Source lines are added for each dependency, and those files are compiled 
% using the \meta{compiler}, \meta{compilerflags}, and \meta{lastflags} 
% options.
% For example, if the fourth environment depends on the first and the 
% second, a line is added:
% \begin{center}
% \meta{includecmd} |Withopen0000| \meta{includecmd} |Withopen0001|,
% \end{center}
% where \verb|Withopen| is the prefix used for such augmented files, and the 
% compiler is invoked with:\\
% \begin{center}
% \begin{tabular}{ll}
% \meta{compiler}
%   & \meta{compilerflags}\ \ |Withopen0000|\ \ |Withopen0001| \\
%   & \meta{lastflags}\ \ |Withopen0003|
% \end{tabular}
% \end{center}
%
% \subsubsection{Controlling the display}
%
% This package exploits the display options given by the |fancyvrb| package.
%
% \begin{longtable}{@{}>{\ttfamily}lp{75mm}>{\ttfamily}l@{}}
% \parbox{15mm}{option} & description & \parbox{25mm}{default}\\\hline
% codestyle
% & |fancyvrb| options for code
% & \\
% msgstyle
% & |fancyvrb| options for compiler messages
% & formatcom=\string\em
% \\
% errstyle
% & |fancyvrb| options for error messages
% & formatcom=\string\em
% \\
% \end{longtable}
%
% Other options are passed through to the |fancyvrb| package and applied to 
% code blocks.
% For example, \verb|frame=single|.
%
% \subsection{The \texttt{runverbatim} environment}\label{sec:rvenv}
%
% \DescribeEnv{runverbatim}
% As an optional argument, this environment takes a comma separated list of 
% \meta{key}|=|\meta{value} and single \meta{key}s.
%
% \begin{longtable}{@{}>{\ttfamily}lp{100mm}}
% \parbox{15mm}{option} & description \\\hline
% fail
% & This code is expected to fail; an error is reported if it succeeds.
% \\
% continue
% & This code is continued from the previous |runverbatim| environment; all 
% of the definitions available there are imported.
% \\
% label
% & Label this code for later inclusion.
% \\
% include
% & All of the definitions available after the environment with the given 
% label are imported.
% \\
% withresult
% & The result of compiling the code is displayed (see also 
% |\runverbatimmsg| and |runverbatimerr|).
% This is normally either the types of declared values or the results of 
% evaluation.
% For environments marked |fail|, it will be an error message.
% \\
% withoutresult
% & The result of compiling code is not displayed automatically.
%   This is the default behaviour, but it can be overridden by the package 
%   options.
% \\
% hide
% & Do not display the code itself.
%   It is still compiled and displayed (if |withresult|) is active, and its 
%   definitions are still available for continuation (|continue|) or 
%   labelling (|label|) and later inclusion (|include|).
% \\
% skipone
% & Do not display the first line of the code.
%   This line is still sent to the compiler and may thus be used to open 
%   other modules, or to pass execution options (via comments).
% \\
% skiptwo
% & As pre the previous option, but two lines are skipped.
% \\
% skipnone
% & Do not skip any lines; this option overrides any package-level skip 
% setting.
% \end{longtable}
%
% The results of compiling the code in a |runenvironment| are made available 
% in the following macros until the next |runenvironment| which will 
% redefine them.
% \begin{description}
%
% \item[\texttt{\string\runverbatimcmd}]
% \DescribeMacro{\runverbatimcmd}
% contains an idealised version of the command line used to compile the code 
% sample.
% It includes the |prompt|, the basename of |compiler|, and |lastflags|, but 
% not |compilerflags| or the list of included files.
% Furthermore, the |subdir| and serial number are removed from the filename 
% of the code sample, which becomes simply \meta{prefix}|.|\meta{ext}.
%
% \item[\texttt{\string\runverbatimmsg}]
% \DescribeMacro{\runverbatimmsg}
% contains the verbatim text emitted by the compiler when compilation 
% succeeds.
% It is undefined after an environment marked |fail|.
%
% \item[\texttt{\string\runverbatimerr}]
% \DescribeMacro{\runverbatimerr}
% contains the verbatim text emitted by the compiler when compilation fails.
% It is undefined after an environment not marked |fail|.
% \end{description}
%
% \subsection{The \texttt{runverbatim.sh} script}\label{sec:rvsh}
%
% Processing a document that uses the |runverbatim| package produces a 
% |.rvrb| file containing compiler options and a list of source files to 
% together with their interdependencies.
% The |runverbatim.sh| script processes |.rvrb| files by executing the 
% specified compiler (or interpreter) against each listed source file 
% \meta{subdir}|/|\meta{prefix}\meta{n}|.|\meta{ext} and copying the 
% results---the command-line used, whether it succeeded or failed, the 
% messages on stdout, and the messages on stderr---into a corresponding 
% file, \meta{subdir}|/|\meta{prefix}\meta{n}|.tex|, for inclusion in the 
% original document.
%
% The \verb|runverbatim.sh| script is written for the Bourne shell 
% (\verb|sh|).
% It takes a list of |.rvrb| files as arguments (with or without the 
% exentions), but if none are given it processes all such files in the 
% current working directory.
%
% \StopEventually{}
\makeatletter
%
% \section{Remarks}
%
% \subsection{Known limitations}
%
% The package and script have some known limitations.
% \begin{itemize}
% 
% \item
% Line numbers in error messages may not correspond correctly with the line 
% numbers of sample files, due to either the |skip*| options, or because of 
% lines added to import code.
% 
% \end{itemize}
%
% \section{Implementation}
%
% \begin{macro}{\runverbatim}
%    \begin{macrocode}
\newcounter{runverbatim}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\ifRVRB@fileexists}
%    \begin{macrocode}
\newif\ifRVRB@fileexists
%    \end{macrocode}
% \end{macro}
%
% \subsection{Package Options}
%
%    \begin{macrocode}
\DeclareBoolOption{withresult}
\DeclareComplementaryOption{withoutresult}{withresult}
%    \end{macrocode}
%
% \begin{macro}{\ifRVRB@pkg@verbopts}
%    \begin{macrocode}
\def\RVRB@pkg@verbopts{}
\DeclareVoidOption{skipone}
    {\edef\RVRB@pkg@verbopts{\RVRB@pkg@verbopts,firstline=2}}
\DeclareVoidOption{skiptwo}
    {\edef\RVRB@pkg@verbopts{\RVRB@pkg@verbopts,firstline=3}}
\DeclareDefaultOption
    {\edef\RVRB@pkg@verbopts{\RVRB@pkg@verbopts,\CurrentOption}}
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
\DeclareStringOption[]{codestyle}
\DeclareStringOption[formatcom=\em]{msgstyle}
\DeclareStringOption[formatcom=\em]{errstyle}
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareStringOption{subdir}
\DeclareStringOption[runverbatim]{prefix}
\DeclareStringOption[.ml]{ext}
\DeclareStringOption[\#]{prompt}
\DeclareStringOption[ocamlc]{compiler}
\DeclareStringOption{compilerflags}
\DeclareStringOption[-i]{lastflags}
\DeclareStringOption[open]{includecmd}
%    \end{macrocode}
%
%    \begin{macrocode}
\def\runverbatimsetup{\kvsetkeys{RVRB}}
%    \end{macrocode}
%
%    \begin{macrocode}
\ProcessKeyvalOptions*
%    \end{macrocode}
%
% \subsection{Logging Files to Process}
%    \begin{macrocode}
\newwrite\RVRB@samplefile
\openout\RVRB@samplefile=\jobname.rvrb
\AtEndDocument{\closeout\RVRB@samplefile}
%    \end{macrocode}
%
%    \begin{macrocode}
\write\RVRB@samplefile{subdir=\RVRB@subdir/}
\write\RVRB@samplefile{prefix=\RVRB@prefix}
\write\RVRB@samplefile{ext=\RVRB@ext}
\write\RVRB@samplefile{compiler=\RVRB@compiler}
\write\RVRB@samplefile{compilerflags=\RVRB@compilerflags}
\write\RVRB@samplefile{lastflags=\RVRB@lastflags}
\write\RVRB@samplefile{includecmd=\RVRB@includecmd}
%    \end{macrocode}
%
% \begin{macro}{\RVRB@logsample}
%    \begin{macrocode}
\newcommand{\RVRB@logsample}[2]{%
  \edef\RVRB@tolog{#1:#2 [page=\noexpand\thepage] [line=\the\inputlineno]}%
  \expandafter\write\expandafter\RVRB@samplefile\expandafter{\RVRB@tolog}%
}
%    \end{macrocode}
% \end{macro}
%
% \subsection{Insertion of Compilation Results}
%
% \begin{macro}{\ifrunverbatim}
%    \begin{macrocode}
\newif\ifrunverbatim
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\setrunverbatimcmd}
%    \begin{macrocode}
\newcommand{\setrunverbatimcmd}[1]{%
    \global\def\runverbatimcmd{\emph{\RVRB@prompt{#1}}}}
%    \end{macrocode}
% \end{macro}

% \begin{environment}{RunVerbatimMsg}
%    \begin{macrocode}
\def\RunVerbatimMsg{\FV@Environment{}{RunVerbatimMsg}}
\def\FVB@RunVerbatimMsg{\FVB@SaveVerbatim{RunVerbatimMsg}}
\let\FVE@RunVerbatimMsg\FVE@SaveVerbatim
\DefineVerbatimEnvironment{RunVerbatimMsg}{RunVerbatimMsg}{}
%    \end{macrocode}
% \end{environment}

% \begin{environment}{RunVerbatimErr}
%    \begin{macrocode}
\def\RunVerbatimErr{\FV@Environment{}{RunVerbatimErr}}
\def\FVB@RunVerbatimErr{\FVB@SaveVerbatim{RunVerbatimErr}}
\let\FVE@RunVerbatimErr\FVE@SaveVerbatim
\DefineVerbatimEnvironment{RunVerbatimErr}{RunVerbatimErr}{}
%    \end{macrocode}
% \end{environment}

% \begin{macro}{\runverbatimfile}
%    \begin{macrocode}
\newcommand{\runverbatimfile}{\RVRB@prefix\RVRB@ext}
%    \end{macrocode}
% \end{macro}
%
% \subsection{Command Options}
%
% \begin{macro}{\ifRVRB@shouldfail}
%    \begin{macrocode}
\newif\ifRVRB@shouldfail
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\ifRVRB@showcode}
%    \begin{macrocode}
\newif\ifRVRB@showcode
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
\edef\RVRB@precontinue{}
\define@key{RVRB@envkeys}{continue}[]{\edef\RVRB@continue{\RVRB@precontinue}}
\define@key{RVRB@envkeys}{include}{%
  \edef\RVRB@continue{\RVRB@continue\space\@ifundefined{RVRB@deps@#1}%
    {#1}{\csname RVRB@deps@#1\endcsname}}}
%    \end{macrocode}

%    \begin{macrocode}
\define@key{RVRB@envkeys}{fail}[]{\RVRB@shouldfailtrue}
\define@key{RVRB@envkeys}{label}{\edef\RVRB@label{#1}}
\define@key{RVRB@envkeys}{skipnone}[]{\edef\RVRB@verbopts{\RVRB@verbopts,firstline=1}}
\define@key{RVRB@envkeys}{skipone}[]{\edef\RVRB@verbopts{\RVRB@verbopts,firstline=2}}
\define@key{RVRB@envkeys}{skiptwo}[]{\edef\RVRB@verbopts{\RVRB@verbopts,firstline=3}}
\define@key{RVRB@envkeys}{hide}[]{\RVRB@showcodefalse}
\define@key{RVRB@envkeys}{withresult}[]{\RVRB@withresulttrue}
\define@key{RVRB@envkeys}{withoutresult}[]{\RVRB@withresultfalse}
%    \end{macrocode}
%
% \subsection{Main Environment}
%
% \begin{environment}{RunVerbatim}
% Include a code sample in the document.
% This macro works in two parts:
% \begin{enumerate}
% \item
% It uses the listings package to write the code to a file with the name 
% protect runverbatim@name followed by the value of 
%  protect runverbatim@counter padded out with zeroes to four digits, and the 
% extension  protect runverbatim@ext.
% This file is created in the subdirectory  protect runverbatim@subdir.
% That is, the fourth code sample is written to a file: 
% \meta{subdir}|/|\meta{name}|0004.|\meta{ext}.
%
% \item
% If the corresponding |.tex| file exists it is loaded, otherwise an error 
% message is logged.
% \end{enumerate}
%    \begin{macrocode}
\lstnewenvironment{runverbatim}[1][]
  {%
    \RVRB@shouldfailfalse%
    \RVRB@showcodetrue%
    \let\RVRB@label\@undefined%
    \edef\RVRB@continue{}%
    \let\RVRB@verbopts\RVRB@pkg@verbopts%
    \def\@currentlabel{\therunverbatim}%
    \setkeys{RVRB@envkeys}{#1}%
    \RVRB@logsample{\arabic{runverbatim}}{\RVRB@continue\ifRVRB@shouldfail\space[fail]\fi}%
    \global\edef\RVRB@precontinue{\RVRB@continue\space\arabic{runverbatim}}%
    \@ifundefined{RVRB@label}{}{%
    \global\expandafter\edef\csname RVRB@deps@\RVRB@label\endcsname{\RVRB@precontinue}}%
    \edef\RVRB@num{%
        \ifnum\value{runverbatim}<1000 0\fi
        \ifnum\value{runverbatim}<100  0\fi
        \ifnum\value{runverbatim}<10   0\fi
        \arabic{runverbatim}}%
    \stepcounter{runverbatim}%
    \def\RVRB@file{\RVRB@subdir/\RVRB@prefix\RVRB@num}%
    \global\let\runverbatimcmd\@undefined%
    \global\let\FV@SV@RunVerbatimMsg\@undefined%
    \global\let\FV@SV@RunVerbatimErr\@undefined%
    \runverbatimtrue%
    \setbox\@tempboxa\hbox\bgroup%
    \lst@BeginWriteFile{\RVRB@file\RVRB@ext}%
  }
  {%
    \lst@EndWriteFile%
    \egroup%
    \ifRVRB@showcode
        \bgroup%
        %\expandafter\lstset\expandafter{\RVRB@verbopts}%
        %\lstinputlisting{\@file}
        \expandafter\fvset\expandafter{\RVRB@verbopts}%
        \expandafter\VerbatimInput\expandafter[\RVRB@codestyle]{\RVRB@file\RVRB@ext}%
        \egroup%
    \fi
    \edef\RVRB@none{$\langle$Cannot load \RVRB@file.tex!$\rangle$}
    \InputIfFileExists{\RVRB@file.tex}{\RVRB@fileexiststrue}{\RVRB@fileexistsfalse}
    \ifRVRB@fileexists
        \@ifundefined{FV@SV@RunVerbatimMsg}
          {}{\global\def\runverbatimmsg{%
             \expandafter\UseVerbatim\expandafter[\RVRB@msgstyle]{RunVerbatimMsg}}}
        \@ifundefined{FV@SV@RunVerbatimErr}
          {}{\global\def\runverbatimerr{%
             \expandafter\UseVerbatim\expandafter[\RVRB@errstyle]{RunVerbatimErr}}}
        \ifRVRB@shouldfail
            \ifrunverbatim
                \PackageWarning{runverbatim}
                    {Compilation of \RVRB@file\RVRB@ext\space should have failed}
                \UseVerbatim[frame=single,
                             label=Unexpected success,
                             rulecolor=\color{red}]{RunVerbatimMsg}
            \else
                \ifRVRB@withresult
                    {\setlength{\partopsep}{0em}\runverbatimerr}
                \fi
            \fi
        \else
            \ifrunverbatim
                \ifRVRB@withresult
                    {\setlength{\partopsep}{0em}\runverbatimmsg}
                \fi
            \else
                \PackageWarning{runverbatim}
                    {Compilation of \RVRB@file\RVRB@ext\space should not have failed}
                \UseVerbatim[frame=single,
                             label=Unexpected failure,
                             rulecolor=\color{red}]{RunVerbatimErr}
            \fi
        \fi
    \else
        \PackageWarning{runverbatim}{Cannot load \RVRB@file.tex}
        \global\let\runverbatimcmd\RVRB@none
        \global\let\runverbatimmsg\RVRB@none
        \global\let\runverbatimerr\RVRB@none
    \fi
  }
%    \end{macrocode}
% \end{environment}
%
\makeatother
\clearpage
% \Finale
\endinput
