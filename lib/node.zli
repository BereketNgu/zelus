(**************************************************************************)
(*                                                                        *)
(*                                Zelus                                   *)
(*               A synchronous language for hybrid systems                *)
(*                       http://zelus.di.ens.fr                           *)
(*                                                                        *)
(*                    Marc Pouzet and Timothy Bourke                      *)
(*                                                                        *)
(*  Copyright 2012 - 2019. All rights reserved.                           *)
(*                                                                        *)
(*  This file is distributed under the terms of the CeCILL-C licence      *)
(*                                                                        *)
(*  Zelus is developed in the INRIA PARKAS team.                          *)
(*                                                                        *)
(**************************************************************************)

type status =
  | Success (* the integration has succeed *)
  | RootsFound (* a root has been found *)
  | Horizon of float (* the integration has succeed; returns the next horizon *)
  | Cascade (* a cascade *)
  | StopTimeReached (* the end of simulation time is reached *)
  | Error (* something went wrong during integration *)

type 'a return =
    { time: float; status: status; result: 'a }

val solve : ('a -C-> 'b) -S-> float -S-> float * 'a -D-> 'b return
