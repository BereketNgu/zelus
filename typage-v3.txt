Objectif:

Definir le systeme de types de Zelus qui permette de prendre
en compte les besoins suivants:

1/ pour specifier qu'un calcul doit etre fait
a "compile time", e.g., les arguments des tableaux;
2/ des calculs a "instanciation time", e.g., on execute du code une
fois pour toute mais dont le resultat n'est pas connu a la compilation;
3/ des calculs faits a chaque cycle.

when = { Static, Init, Cycle }

4/ Du temps discret et du temps continu.

time = { Discrete, Continuous }

5/ Des calculs determistes, des calculs probabilistes.

mode = { Det, Proba }  

6/ Des calculs a memoire, des calculs combinatoires.

state = { Combinatorial, Sequential } (ou bien { Fun, Node })

Une premiere intuition est de considerer la produit cartesien

kind = when x time x mode x state

On peut alors utiliser cette sorte (kind) pour etiqueter les
fleches, e.g., -k->. k est un "effet".

Et si on veut de la genericite, e.g., une fonction qui prend en
argument une fonction peut avoir une sorte qui est une inconnue (une variable).
On arrive facilement a un systeme de type avec sous
typage. E.g., un calcul statique peut etre utilise pour calculer une
valeur a l'instanciation qui peut elle-meme etre utilisee a chaque
cycle. Une expression combinatoire peut etre utilisee dans une
expression a temps continu ou a temps discret. Une expression
deterministe peut etre utilisee dans une expression probabiliste.

Mais: le sous-typage est un cauchemard a implementer; les messages d'erreur
sont rapidement illisible; il faut ajouter un algorithme de simplification
des types et il n'y a pas, en general de forme canonique, etc. Le cout d'une
telle genericite n'est pas nul car toutes les valeurs n'ont pas la meme
representation. E.g., un noeud (w1,t1,m1,Sequential) n'est pas
implemente comme une fonction combinatoire (w1,t1,m1,Combinatorial). Idem
pour (w1,t1,Proba,s1) versus (w1,t1,Det,s1). De sorte que si on
autorise cette genericite, il faudra implementer derriere du code
de conversion dont le cout n'est pas nul.

Peut-on se passer de sous-typage ? Leroy et Pessaux avaient fait un
systeme pour calculer les ensembles d'exceptions d'un programme ML en
utilisant le systeme de types avec rangees de Remy; sans sous-typage
donc. Mandel et Pasteur avaient fait de meme pour definir des types
(dans l'esprit des "session types") pour l'analyse de reactivite de ReactiveML.
Je ne me souviens plus de la solution de Leroy et Pessaud: je vais relire
leur article!

J'ai suivi la voie suivante, avec deux propositions, l'objectif etant de
remplacer le sous-typage par du typage classique n'utilisant que
de l'unification du premier ordre. Ca oblige a un peu d'annotations mais
semble conservatif avec la solution actuelle implementee dans Zelus.

Remarques preliminaires:
------------------------

1/ Soit var = { a1, ..., an } un ensemble de variables. On est tente de
manipuler l'ensemble:

(when + var) x (time + var) x (mode + var) x (state + var).

Ainsi, la sorte k = (a1, Discrete, Proba, a2) pour une fonction
de type . -k-> ., des lors que a1 et a2 sont des variables sans contraintes,
signifie qu'elle peut etre appliquee quand on veut, sur du temps discret, que
c'est une fonction "probabiliste" et qu'elle peut etre a etat ou non.

Y-a-t'il du sous-typage? Si on ne dit rien sur les elements des ensembles
when, time, mode et state, c'est-a-dire qu'ils sont incomparables, il n'y
en a pas. Dans ce cas, une fois qu'une expression a la sorte:
(Static,t1,m1,s1), elle l'a garde: on ne peut pas l'utiliser, au moins
implicitement, dans une expression de sorte (Init,t1,m1,s1). De meme, une
expression de sorte (w1,t1,Det,s1) ne peut pas etre utilisee la
ou on attend une expression de sorte (w1,t1,Proba,s1).

En somme, les elements de chaque ensemble sont incomparables
deux-a-deux. Le seul ordre que l'on utilise est l'ordre de Milner (un
type t1 est plus petit qu'un autre t2 s'il est plus general,
c'est-a-dire qu'il existe une substitution de ses variables qui permet
d'obtenir t2).

Ainsi, (a1, a2, Proba, Sequentiel) dit "quand on veut, discret ou
continu, probabiliste, a memoire".

Sans sous-typage, si une fonction a la sorte
(Static,Discrete,Det,Combinatorial), elle ne pourra etre utilise que
dans le meme contexte (une expression de meme sorte). Est-ce
raisonnable? Il me semble qu'on aimerait avoir la possibilite de dire
qu'une fonction doit seulement etre utilise a la compilation (Static)
ou a la compilation et a l'initialisation ou seulement a chaque cycle
(Cycle); qu'une fonction combinatoire (Fun) peut etre utilisee dans un
noeud (Node); et pas l'inverse. Qu'une fonction (Det) peut etre
utilise dans une fonction probabiliste (Proba); et pas l'inverse.

En somme, cela conduirait a avoir:

Static < Init < Cycle

Discrete # Continuous (incomparables)

Det < Proba

Combinatorial < Sequential

+ des variables pour chacun. A la fin, on a bien un systeme avec sous-typage.
Les types sont de la forme:

sigma ::= forall a1,...,an. b1,...,bm: C. t | t
t     ::= t -k-> t | t *...* t | b | (t,...,t) c

avec k ::= when x time x mode x state
when ::= Static | Init | Cycle | b
time ::= Discrete | Continuous | b
mode ::= Det | Proba | b
state ::= Combinatorial | Sequential | b

C ::= { ki <= kj }_{i,j \in Nat}

(pour simplifier, j'utilise le meme symbole de variable b indistinctement
de la partie dans laquelle elle est presente).

Premiere proposition:
---------------------

sigma ::= forall a1,...,an. t | t
t     ::= t -> t -> ... -k-> t | t *...* t | a
       | (t,...,t) c

On prend des types n-aires pour les fonctions pour simplifier
la lecture/ecriture des types des fonctions.

k ::= m.k | not m.k | a

m ::= fun | node | det | proba
   |  discrete | continuous
   |  static | val | cycle
   |  det | proba
   
Exemples:

fun.det.discrete.a signifie "noeud sans memoire, deterministe, temps discrete"

node.det.continuous.a signifie "noeud a memoire, deterministe, temps continu".

Les types sont soumis a des regles de bonne formation.

L'intuition est que:

1/ not fun = node et not node = fun;
2/ not discrete = continuous; not continuous = det;
3/ not det = proba; not proba = det.
4/ c'est un peu plus complique pour { static, val, cycle } car il
y a trois elements. On peut donc preciser not static signifie que
le calcul est utilisable pendant l'instanciation ou a chaque cycle.

not (not (x)) = x; not (m1...mn).a = not(m1)....,not(mn).a

Règle de bonne formation. Intuition: on ne peut pas avoir
a la fois m et not m dans k.

|= k signifie que k est bien forme.

Trois regles:

|= k   k |= m
—————--------
 |= m.k
 
|= k   k |= not m
—————------------
 |= not m.k


 |= a
 

k |= m signifie que k ne contredit pas m.

not m |= m est un cas de contradiction. Ne devrait-on pas plutot definir
les cas de contradiction et dire que k est bien forme s'il ne contient pas
de contradiction ?



Typage des déclarations: On impose des simplifications, en particulier
parce qu'un noeud a memoire n'est pas implementee comme un noeud sans memoire;
qu'un noeud deterministe n'est pas implemente comme un noeud probabiliste.

(1) let f x1...xn = e

|-fun.det.k   "let" definit une fonction deterministe, sans memoire"

(2) let node f x1...xn = e

|-node.det.k "let node" definit une fonction deterministe, a memoire"

(3) let proba f x1...xn = e

|-fun.proba.k "definit une fonction probabiliste sans memoire"

(4) let proba node f x1...xn = e 

|-node.proba.k "definit une fonction probabiliste a memoire"

Rmq: on peut toujours rajouter des contraintes, par exemple que la
fonction est a temps discret ou a temps continu, qu'elle est statique
ou non.


(5) let static f = e

Dans un environnement courant H,

H on S.not A.not V. b |-fun.S.a. e : t

(6) fun x1 (static x2) ... x5 -> e

static indique que la valeur doit forcément être connu à la compilation. Pas à un autre moment. static est donc un raccourci pour S.not A.not V.a

Par contre, en hypothèse, on peut dire que a x2: t2.

k on k ... on k

H, k on ... on k x : t |-k x : t

Application:

H |-k f: t1 -> ... -> tm -k-> t
H |-k ei : ti
m <= n
———————————————-
H |-k f e1...en : tm+1 ->...-k-> t

H |- S.not A.not V. k e : t
————————————-
H |-a static e: t

H |-V.k e : t
—————————-
H |-not S.k’ value e: t

On sait que si V, alors il n’y a pas de contraintes en terme de temps (discret ou continu), ni en terme de déterminisme, probabiliste.



Deuxieme proposition:
---------------------


H ::= [s1 x1: t1;...;sn xn: tn]
H |-k e : t

k ::= {det:d; fun:f; time:t; safe:a}
d ::= Det | Proba | 'a
f ::= Fun(s) | Node
t ::= Hybrid | Discrete | 'c
a ::= Safe | Unsafe | 'd
s ::= Static | Val | Dyn | 'e


Conventions d'affichage:

-S-> versus -V-> versus -> versus -'a-> pour les fonctions;

=> pour les noeuds;

~> pour les fonctions "probabilistes"; ~=> pour les noeuds "probabilistes"

Pour ne pas avoir des types monstrueusement compliques, adopter une
notation avec un peu de partage, par exemple:

val f : Hybrid('a). int -'a-> bool -'a-> int * int

ou

static f : Hybrid('a). int -h('a)-> bool -'a-> int * int

s ::= S | V | A (* S pour static = compile-time; V pour val = instanciation; A pour
                         any = dynamic *)
k ::= S | V | A | M (* ... M pour memory = stateful *)
p ::= D | P (* D pour deterministic; P pour probabilistic *)

-pk-> avec la convention d'affichage:

-DS->; -DV->; -DA-> simplement ->; -DM-> par =>
-PS-> par ~S~>; -PV-> par ~V~>; -PA-> par ~>; -PM-> par ~=>


\begin{verbatim}
  t ::= t -ps-> t | t * ... * t | 'a | (t,...,t) bt
  sigma ::= 'a1,...,'an. 'b1,...,'bm.'c1,...,'cr.t

  k ::= S | V | A(tau) | 'b
  p ::= proba | det
  s ::= node(tau) | fun(k)
  tau ::= D | C | 'c

  node(D): a etat, temps discret; -D=>
  node(C): a etat, temps discret; -C=>
  node('c): a etat, quand on veut; -'a=>
  fun(S): sans memoire, temps statique; -S->
  fun('b): sans memoire, statique ou non; -'b->
  fun(A('c)): sans memoire; -A'a->
  fun(A(D)): sans memoire, discret; -AD-> 
  fun(A(C)): sans memoire, continu; -AC->

  H ::= [k x : t;...; k x : t]

  H |-s e : t
  
  H, A(tau) x : t1 |-node(tau) e: t2
---------------------------------------------
H |-s node f x = e : [f : t1 -node(tau)-> t2]

  H, k x : t1 |-fun(k) e: t2
--------------------------------------------
H |-s fun f x = e : [f : t1 -fun(k)-> t2]

  H |-fun(S) e1: t1  H, 'b x: t1 |-s(k) e2 : t2
-----------------------------------------------
H |-s let static x = e1 in e2 : t2


  H |-s f: t1 -fun(k)-> t2  H |-s by k e : t1     
-----------------------------------------------
    H |-s f e : t2

avec node(tau) by A(tau) = node(tau)
et   fun(k) by k = fun(k)

indefini sinon.


    H |-fun(S) f: t1 -node(tau)-> t2  H |-node(tau) e : t1
----------------------------------------------------------
  H |-node(tau) run f e : t2

      H |-node(tau) f: t1 -node(tau)-> t2  H |-node(tau) e : t1
---------------------------------------------------------------
  H |-node(tau) restart f e : t2

  
  H, k x : t |-node(tau) x: t

  H, k x : t |-fun(k) x: t

  H |-s c: t

    H |-s E1: H1  H |-s E2: H2
------------------------------------
  H |-s E1 and E2: H1+H2

      H |-s p : t   H |-s e : t k = intro(s)
--------------------------------------------
      H |-s p = e: [k p : t]

avec intro(node(tau)) = A(tau)
et intro(fun(k)) = k

 H, s(H0) |-s E : s(H0)   H, s(H0) |-s e : t
--------------------------------------------
H |-s letrec E in e : t

avec node(tau)([A tau1 x1 : t1;...; A taum xm : tm])
et   fun(k)([k x1 : t1;...; k xm : tm])


 H |-discrete(s) E1 : H'   H |-s E2 : H'
-----------------------------------------
  H |-s present e -> E1 else E2: H'

  avec discrete(node(tau)) = node(D)
  et   discrete(fun(A(tau))) = fun(A(D))

 H |-s e : t  H |-s E1 : H'   H |-s E2 : H'
-------------------------------------------
  H |-s if e then E1 else E2: H'
\end{verbatim}


